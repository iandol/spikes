function spikes(action)

%**********************************************************************************
% This Program will allow generation of PSTH and other spike
% measurements for up to 3 variables.
%**********************************************************************************

%-----------------------------------Global Variable Definitions----------------------------

global sv				%this holds many of the GUI interaction variables
global data				%this is the main data structure
global rlist			%this holds the cell list reports generated by spikereport
global automeasure
global txtcomment		%these store vsx generated data info text files
	global txtprotocol	%same

%--------------------------------------------Start------------------------------------------

if nargin<1;
	action='Initialize';
end

switch(action)			%As we use the GUI this switch allows us to respond to the user input
	
	%----------------------------------------------------------------------
	case 'Initialize'
	%----------------------------------------------------------------------
		sv = [];
		data = [];
		rlist = [];
		sv.version = 2.05;
		sv.mversion = str2double(regexp(version,'(?<ver>^\d\.\d\d)','match','once'));
		sv.title = ['SPIKES: V' sprintf('%.4f',sv.version)];
		if ismac
			if ~exist(['~' filesep 'MatlabFiles' filesep],'dir')
				mkdir(['~' filesep 'MatlabFiles' filesep]);
			end
			sv.matlabroot = matlabroot;
			sv.usingmac = 1;
			sv.historypath = ['~' filesep 'MatlabFiles' filesep];
			sv.temppath = tempdir;
			oldlook = javax.swing.UIManager.getLookAndFeel;
			if sv.mversion<7.12
				javax.swing.UIManager.setLookAndFeel('javax.swing.plaf.metal.MetalLookAndFeel');
			end
		elseif ispc
			if ~exist(['c:' filesep 'MatlabFiles' filesep],'dir')
				mkdir(['c:' filesep 'MatlabFiles' filesep])
			end
			sv.matlabroot = regexprep(matlabroot,'Program files','Progra~1','ignorecase');
			sv.usingmac = 0;
			sv.historypath = ['c:' filesep 'MatlabFiles' filesep];
			sv.temppath = tempdir;
		end
		
		sv.userroot = fileparts(mfilename('fullpath'));
		
		sv.uihandle = spikes_UI; %our GUI file
		if ismac
			if sv.mversion<7.12
				javax.swing.UIManager.setLookAndFeel(oldlook);
			end
		end
		figpos(1);	%position the figure
		set(sv.uihandle,'Name', [sv.title ' | Started at ' datestr(now)]);
		colormap(jet(256)); %this gives us a much higher resolution colormap
		%-------The following sv structure sets up the GUI interface structure--
		sv.BinWidth = 10;
		sv.StartMod = 1;
		sv.EndMod = Inf;
		sv.StartTrial = 1;
		sv.EndTrial = Inf;
		sv.Wrapped = 1;
		sv.AnalysisMethod = 1;
		sv.firstunit = 1;
		sv.loop = 0;
		sv.HeldVariable = 3;
		sv.HeldValue=1;
		sv.PropAxis=1;
		sv.PlotType='Raw Data';
		sv.ShadingType='interp';
		sv.Lighting='phong';
		sv.SmoothType='none';
		sv.SmoothValue=5;
		sv.CMap='jet';
		sv.LightAdd='none';
		sv.reload='no';
		sv.loadtype='';
		sv.loaded='no';
		sv.ErrorMode='Standard Error';
		sv.ticks='out';
		sv.layer='top';
		sv.box='on';
		sv.auto='no';
		sv.startOffset = 0;
		sv.cellmap = [1 2 3 4 5 6];
		sv.xval=1;
		sv.yval=1;
		sv.zval=1;
		sv.xlock=0;
		sv.ylock=0;
		sv.zlock=0;
		sv.xholdold=0;
		sv.yholdold=0;
		sv.zholdold=0;
		sv.labelsize = 10;
		sv.autosave = 0;
		sv.MeasureButton = 0;
		sv.plotBARS = 0;
		sv.bars.prior_id = 'POISSON';
		sv.bars.dparams=4;
		sv.bars.burn_iter=200;
		sv.bars.k = 3;
		sv.bars.nf = 500; %The number of evenly spaced points for the grid along which fitted values will be obtained.
		sv.bars.use_logspline = 1; %"true" or "false" to indicate whether Logspline is used for the initial knots. If Logspline is not used, evenly spaced knots are used. Default value = true.
		sv.bars.beta_iter = 3; %Number of iterations for the independence chain on beta for a particular set of knots. It only runs a chain if the initial beta variate is suspect. In this case, the independence chain is run starting from the mle and only the last variate is used. If no beta candidates were accepted, no beta is used although the knot set is not rejected.
		sv.bars.probbd = .4; %Parameter that controls the probability of birth and death candidates. It may be at most 0.5. Larger values increase the probability for birth death candidates. Smaller values increase the probability for knot relocation.
		sv.bars.tau = 50; %Parameter that controls the spread for the knot proposal distribution. A candidate knot is generated by first selecting a current knot t, 0 < t < 1, and then selecting candidate knot ~ beta(t * tau, (1-t) * tau).
		sv.bars.conf_level = .95; %The confidence level for parameter intervals.
		sv.bars.threshold = -10; %Threshhold for determining whether the initial beta variate is suspect. It is suspect if the log acceptance probability is less than the threshhold.
		sv.bars.usezero = 1;
		%-----------------------------------------------------------------------
		sv.mint=0;
		sv.maxt=inf;
		sv.measureButton = false;
		automeasure=0; 			%used by temporal movie creator
		
		history='';
		shistory='';
		paths='';
		if exist([sv.historypath 'history.mat'],'file')
			load([sv.historypath 'history.mat']);
			set(gh('spikehistory'),'String',history);
		else
			set(gh('spikehistory'),'String',' ');
		end
		if exist([sv.historypath 'shistory.mat'],'file')
			load([sv.historypath 'shistory.mat']);
			if length(shistory)>10
				set(gh('SSliceHistory'),'String',shistory(end-9:end));
			else
				set(gh('SSliceHistory'),'String',shistory);
			end
		end
		
		set(gh('CMapMenu'),'String',{'jet';'jet2';'hot';'rbmap';'gray';'gray1';'gray2';'hsv';'prism';'colorcube';'bone';'copper';'pink';'summer';'winter';'autumn';'spring'});
		set(gh('ErrorMenu'),'String',{'Standard Error';'Standard Deviation';'Fano Factor';'Coefficient of Variation';'2 StdDevs';'3 StdDevs';'2 StdErrs';'Variance'});
		set(gh('ErrorMenu'),'Value',1);
		set(gh('AxisMenu'),'String',{'auto';'on';'off';'normal';'tight';'vis3d';'equal';'square';'image';'------------';'Axis Above Data';'Axis Below Data';'Ticks Facing In';'Ticks Facing Out';'Axis Box On';'Axis Box Off';'Flip X and Y';'Y Axis Normal';'Y Axis Reverse';'------------';'Auto Renderer';'Painters Renderer';'ZBuffer Renderer';'OpenGL Renderer'});
		set(gh('AnalysisMenu'),'String',{'Mean';'Peak 3 bin';'Peak 1 Bin';'Count';'A/B Ratio';'FFT'});
		set(gh('SmoothingMenu'),'String',{'none';'cubic';'spline';'linear';'nearest'});
		set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Curve';'Surface'});
		set(gh('SPlotMenu'),'Value',7);
		set(gh('STypeMenu'),'String',{'Raw Data';'Mesh';'CheckerBoard';'CheckerBoard+Contour';'Surface';'Lighted Surface';'Surface+Contour';'Contour';'Filled Contour';'Waterfall';'Rectangle Plot'});
		set(gh('AnalMenu'),'String',{'========';'Plot All PSTHs';'Plot Single PSTH';'Plot All ISIs';'Plot Fano';'Polar Diagonals';'Metric Space';'Metric Space (Interval)';'Binless';'Direct Method';'BARS';'Half-Width';'Difference of Gaussian';'Surround Suppression';'Bootstrap curve';'Gabor Fit';'Gaussian Fit 1D';'Gaussian Fit 2D';'Burst Ratio';'Temporal Analysis';'Area Analysis';'2D Curves';'Save for MetaAnal';'Plateau Analysis';'Tuning Curves';'Temporal Movie'});
		set(gcf,'DefaultLineLineWidth',1);
		set(gcf,'DefaultAxesLineWidth',1);
		set(gcf,'DefaultAxesFontName','Helvetica');
		set(gcf,'DefaultTextFontName','Helvetica');
		set(gcf,'DefaultAxesFontSize',9);
		set(gcf,'DefaultTextFontSize',10);
		set(gca,'Layer','top');						%ticks go over data
		set(gca,'TickDir','out');					%get ticks going out
		set(gh('SMinEdit'),'UserData','no');		%these initialize the min and max time boxes
		set(gh('SMaxEdit'),'UserData','no');		%...
		set(gca,'tag','SpikeFigMainAxes');			%make sure axes have right name
		set(gcf,'tag','SpikeFig');					%ditto for the figure
		if exist([sv.historypath 'spiketemp'],'file');delete([sv.historypath 'spiketemp']); end %delete any previous data
		
		if isfield(paths,'matsavepath')
			sv.matsavepath=paths.matsavepath;
		end
		if isfield(paths,'matloadpath')
			sv.matloadpath=paths.matloadpath;
		end
		if isfield(paths,'dataloadpath')
			sv.dataloadpath=paths.dataloadpath;
			%cd(sv.dataloadpath);
		end
		
		%-----------------------------------------------------------------------------------------
	case 'ChoosePlot'
		%-----------------------------------------------------------------------------------------
		
		ChoosePlot;
		
		%------------------------------------------Loading the data-------------------------------------
	case 'Load'
		%-----------------------------------------------------------------------------------------------
		close(gh('MovieToolFig'));
		set(gh('SdoBARS'),'Value',0);
		sv.plotBARS = 0;
		
		startclock=clock;
		startcpu=cputime;
		
		switch(sv.reload)%see if we have to reload the data or not
			case 'yes'
				set(gh('LoadText'),'String','Reloading Data');
				meta=data.meta;
				info=data.info;
				t=data.filetype;
				sourcepath=data.sourcepath;
				zipload = data.zipload;
				zs=data.zs;
				if isfield(data,'pR'); pR = data.pR; end
				data=struct;
				data.zs=zs;
				if exist('pR','var'); data.pR = pR;	else; data.pR=[]; end
				data.meta=meta;
				data.info=info;
				data.filetype=t;
				data.sourcepath=sourcepath;
				data.zipload=zipload;
				sv.reload='no';
			otherwise
				if ~strcmp(sv.auto,'report'); sv.auto='no'; end
				set(gh('LoadText'),'String','Data Loading');
				%This checks to see if we are called with a load history or to open new data.
				n=regexpi(sv.reload,'^(?<name>[^|]+)(?:.+)(?<num>\d)','names'); %part of the file history reloading mechanism
				%na = regexpi(n.name,['(?<seg>[^' filesep ']+)'],'names');
				%na = na(end).seg;
				if ~isempty(n) %&& ~strcmp(sv.loadtype,'') %we already have a path
					switch sv.loadtype
						case 'previous'
							if data.zipload == true
								sv.loadtype='';
								nn=regexpi(n.name,'[^\d\\]+(?<num>\d\d)\.(?<ext>txt|smr|zip)','names');
								number=str2double(nn.num)-1;
								if number<10
									name=regexprep(n.name, '\d\d\.zip', ['0' num2str(number) '.zip']);
								else
									name=regexprep(n.name, '\d\d\.zip', [num2str(number) '.zip']);
								end
								name=regexprep(name,'\s$','');
								if ~exist(name,'file')
									errordlg('No next file');
									error('No next file');
								end
								sv.auto='yes';
							else
								sv.loadtype='';
								nn=regexpi(n.name,'[^\d\\]+(?<num>\d\d)\.(?<ext>txt|smr|zip)','names');
								number=str2double(nn.num)-1;
								ind=regexp(n.name,'/'); %we only want to replave the number for the filename and preceding directory, not anywhere else in the path
								if number<10
									name=regexprep(n.name(ind(end-1)+1:end), nn.num, ['0' num2str(number)]);
									name=[n.name(1:ind(end-1)) name]; %rebuild the full path and file
								else
									name=regexprep(n.name(ind(end-1)+1:end), nn.num, num2str(number));
									name=[n.name(1:ind(end-1)) name]; %rebuild the full path and file
								end
								if ~strcmp(filesep,'/'); name=regexprep(name,'\/','\\'); end
								p = fileparts(name);
								name=[p '.smr'];
								if ~exist(name,'file')
									errordlg('No previous file');
									error('No previous file');
								end
								sv.auto='yes';
							end
						case 'next'
							if data.zipload == true
								sv.loadtype='';
								nn=regexpi(n.name,'[^\d\\]+(?<num>\d\d)\.(?<ext>txt|smr|zip)','names');
								number=str2double(nn.num)+1;
								if number<10
									name=regexprep(n.name, '\d\d\.zip', ['0' num2str(number) '.zip']);
								else
									name=regexprep(n.name, '\d\d\.zip', [num2str(number) '.zip']);
								end
								name=regexprep(name,'\s$','');
								if ~exist(name,'file')
									errordlg('No next file');
									error('No next file');
								end
								sv.auto='yes';
							else
								sv.loadtype='';
								nn=regexpi(n.name,'[^\d\\]+(?<num>\d\d)\.(?<ext>txt|smr|zip)','names');
								number=str2double(nn.num)+1;
								ind=regexp(n.name,'/'); %we only want to replace the number for the filename and preceding directory, not anywhere else in the path
								if number<10
									name=regexprep(n.name(ind(end-1)+1:end), nn.num, ['0' num2str(number)]);
									name=[n.name(1:ind(end-1)) name]; %rebuild the full path and file
								else
									name=regexprep(n.name(ind(end-1)+1:end), nn.num, num2str(number));
									name=[n.name(1:ind(end-1)) name]; %rebuild the full path and file
								end
								if ~strcmp(filesep,'/'); name=regexprep(name,'\/','\\'); end
								p = fileparts(name);
								name=[p '.smr'];
								if ~exist(name,'file')
									errordlg('No next file');
									error('No next file');
								end
								sv.auto='yes';
							end
						otherwise
							name=n.name(1:end-1);
					end
					[p,basefilename,e]=fileparts(name);
					pn=[p filesep];
					fn=[basefilename e];
					sv.firstunit=str2double(n.num);
					set(gh('CellMenu'),'Value',str2double(n.num));
					sv.reload='no';
				else %we need the user to specify a file
					if isfield(sv,'dataloadpath') && exist(sv.dataloadpath,'dir');cd(sv.dataloadpath);end
					[fn,pn]=uigetfile({'*.plx;*.zip;*.smr;*.txt;*.doc','All Spikes Filetypes (*.plx *.zip *.smr *.txt *.doc)'; ...
						'*.plx','Plexon Data (PLX)';...
						'*.zip','VS RAW DATA File (ZIP)';...
						'*.smr','VS RAW DATA File (SMR)';...
						'*.txt','VSX Output File (TXT)'; ...
						'*.doc','XCor Output File (DOC)';...
						'*.*','All Files'},...
						'Select File Type to Load:');
					if isequal(fn,0)||isequal(pn,0);set(gh('LoadText'),'String','No Data Loaded');helpdlg('No File Selected or Found!');error('File was not selected by user / not found.');return;end
					[p,basefilename,e]=fileparts([pn fn]); sv.dataloadpath=pn;
				end
				%we have a file so we reset our data and axes
				if exist('data','var') && isfield(data,'zs')
					zs=data.zs;
				else
					zs=[];
				end
				%we have a file so we reset our data and axes
				if exist('data','var') && isfield(data,'pR')
					pR=data.pR;
				else
					pR=[];
				end
				data = struct();
				data.zipload = false;
				data.zs = zs;
				data.pR = pR;
				cla;  reset(gca);  set(gca,'Tag','SpikeFigMainAxes');	%this resets the axis
				set(gh('SpikeMenu'),'Value',1); %resets the spike selector menu to all spikes
				automeasure=0;
				
				if regexpi(e, '\.plx')
					cd(pn);
					set(gh('LoadText'),'String','Parsing PLX Files, please wait...')
					data.wrapped=2; %force off wrapping;
					sv.Wrapped=2;
					set(gh('WrappedMenu'),'Value',2);
					if ~isa(data.pR,'plxReader')
						data.pR = plxReader('file',fn,'dir',pn,'startOffset',sv.startOffset,'cellmap',sv.cellmap);
						data.pR.parse;
					else
						if strcmpi(data.pR.file,fn) %same file; reparse
							data.pR.startOffset = sv.startOffset;
							data.pR.cellmap = sv.cellmap;
							data.pR.parse;
						else
							[data.pR.matfile, ~] = uigetfile('*.mat','Load Behaviour MAT File');
							[data.pR.edffile, ~] = uigetfile('*.edf','Load EDF File');
							data.pR.file = fn;
							data.pR.dir = pn;
							data.pR.startOffset = sv.startOffset;
							data.pR.cellmap = sv.cellmap;
							data.pR.parse;
						end
					end
					data.zipload=false;
					data.filetype='plx';
					data.sourcepath = [pn fn];
					data.info = data.pR.info;
					data.meta = data.pR.meta;
				
				elseif regexpi(e,'\.zip')
					
					data.zipload=true;
					data.filetype='txt';
					data.sourcepath = [pn fn];
					if isa(data.zs,'zipspikes')
						data.zs.sourcepath = data.sourcepath;
					else
						data.zs=zipspikes(struct('sourcepath',data.sourcepath));
					end
					[data.meta,txtcomment,txtprotocol] = data.zs.readarchive;
					data.info=['===============PROTOCOL================';txtprotocol(2:end);'===============COMMENTS================';txtcomment(9:end)];
					
				elseif regexpi(e,'\.smr') %raw SMR File so we need to run it through VSX first
					
					data.sourcepath = [pn fn];
					if (strcmp(sv.auto,'report') || strcmp(sv.auto,'yes') ) && isdir([p filesep basefilename])
						pn2=basefilename;
						data.filetype = 'txt';
					else
						if isdir([p filesep basefilename]) %stops annoying "directory alread exists" messages
							cd(sv.historypath);
							disp('Deleting existing directory...');
							rmdir([p filesep basefilename],'s');
							cd(p);
						end
						[s,w]=dos(['"',sv.userroot,'\various\vsx\vsx.exe" "',data.sourcepath,'"']);
						if s>0; error(w); end
						pn2 = fn(1:find(fn(:)=='.')-1);
						if ~exist([pn,pn2],'dir'); error('Sorry VSX cannot load the data!!! Make sure files do not have the read-only attribute set...'); end
						data.filetype = 'smr';
					end
					data.meta=loadvstext(strcat(pn,pn2,filesep,pn2,'.txt'));
					txtcomment=textread(strcat(pn,pn2,filesep,pn2,'.cmt'),'%s','delimiter','\n','whitespace','');
					txtprotocol=textread(strcat(pn,pn2,filesep,pn2,'.prt'),'%s','delimiter','\n','whitespace','');
					data.info=['===============PROTOCOL================';txtprotocol(2:end);'===============COMMENTS================';txtcomment(9:end)];
					
				elseif regexpi(e,'\.txt')
					
					data.filetype = 'txt';
					data.sourcepath = [pn fn];
					data.meta=loadvstext(data.sourcepath);
					txtcomment=textread([pn,strrep(fn,'.txt','.cmt')],'%s','delimiter','\n','whitespace','');
					txtprotocol=textread([pn,strrep(fn,'.txt','.prt')],'%s','delimiter','\n','whitespace','');
					data.info=['===============PROTOCOL================';txtprotocol(2:end);'===============COMMENTS================';txtcomment(9:end)];
					
				elseif regexpi(e,'\.doc')
					
					errordlg('Sorry, .doc files are an old format not safe to use, please use the .SMR!');
					error('Sorry, .doc files are an old format not safe to use, please use the .SMR!');
					%dos([sv.matlabroot,'\user\Frogbit\frogbitrun.exe ', sv.matlabroot,'\user\Frogbit\spikestrip1.FB ',pn,fn,]);
					%data.filetype = 'doc';
					
				elseif regexpi(e,'\.mat')
					
					sv.pn=pn;
					sv.fn=fn;
					spikes('Load MAT');
					return;
					
				else
					errordlg('Sorry, unsupported file type loaded!')
					error('File selection error, unsupported file type loaded!')
				end
		end
		[p,basefilename,~]=fileparts(data.meta.filename);	%seperate out the file from the path
		cd(p);	%change to the directory where all the spike time files live
		if data.zipload == true
			sv.dataloadpath = fileparts(data.sourcepath);
		else
			sv.dataloadpath=p;
		end
		data.meta.filename(data.meta.filename=='\')='/';	%stops annoying TeX interpertation errors
		t=find(data.sourcepath==filesep);
		if ~isempty(regexpi(data.sourcepath,'(smr|zip)'));
			data.runname=[data.sourcepath((t(end-1))+1:end-4) ' | '];
		elseif ~isempty(regexpi(data.sourcepath,'(plx)'));
			data.runname=[data.sourcepath((t(end)+1):end-4) ' | '];
		else
			t=find(data.sourcepath==filesep);
			data.runname=data.sourcepath((t(end-2))+1:t(end));
		end
		data.runname=regexprep(data.runname,'(\\|\/)','>');
		
		silence_before_burst 	= str2double(get(gh('silence'),'String'))*10;
		first_isi				= str2double(get(gh('firstisi'),'String'))*10;
		subsequent_isi	   		= str2double(get(gh('subsisi'),'String'))*10;
		number_burst			= str2double(get(gh('numberspikes'),'String'));
		
		if (get(gh('SCutTransient'),'Value')>0) %this gets a time for optinally cutting the first transient out of the data
			cuttime=str2num(get(gh('STransientValue'),'String'))*10; %*10 converts into raw timebase from milliseconds
			if length(cuttime) == 2
				if cuttime(1) == 0
					cuttime = cuttime(2);
				end
			elseif length(cuttime) > 2
				cuttime = 0;
				set(gh('STransientValue'),'String','0');
			end
		else
			cuttime=0;
		end

		data.numvars=data.meta.numvars;
		data.protocol.name=data.meta.protocol;
		if isfield(data.meta,'description')
			data.protocol.desc=data.meta.description;
		else
			data.protocol.desc = '';
		end
		data.protocol.filecomm=data.meta.comments;
		data.protocol.date=data.meta.date;
		data.repeats=data.meta.repeats;
		data.error=[];
		
		if strcmp(data.filetype,'plx') || strcmp(data.filetype,'smr') || strcmp(data.filetype,'txt')
			data.cycles=data.meta.cycles;
			data.trialtime=data.meta.trialtime;
			data.modtime=data.meta.modtime;
			tempfreq = [];
			for jj = 1:length(data.info)
				rx=regexp(data.info{jj},'Stim1:.+Drift.+Period:.+\((?<freq>\d.\d).+\)','names');
				if ~isempty(rx)
					tempfreq = [tempfreq str2num(rx.freq)];
				end
			end
			if isempty(tempfreq)
				if isfield(data.meta,'tempfreq')
					data.tempfreq=data.meta.tempfreq;
				else
					data.tempfreq=[];
				end
			else
				data.tempfreq = tempfreq;
			end
		end
		
		switch data.numvars
			case 0   %this means we have no variables
				%Setup GUI
				sv.yholdold=0;
				sv.xholdold=0;
				sv.zholdold=0;
				set(gh('HoldXText'),'String',' ');
				set(gh('XHoldMenu'),'Value',1);
				set(gh('XHoldMenu'),'String',' ');
				set(gh('XHoldMenu'),'Enable','off');
				set(gh('XHoldCheck'),'Enable','off');
				set(gh('HoldYText'),'String',' ');
				set(gh('YHoldMenu'),'Value',1);
				set(gh('YHoldMenu'),'String',' ');
				set(gh('YHoldMenu'),'Enable','off');
				set(gh('YHoldCheck'),'Value',1);
				set(gh('YHoldCheck'),'Enable','off');
				set(gh('HoldZText'),'String',' ');
				set(gh('ZHoldMenu'),'Value',1);
				set(gh('ZHoldMenu'),'String',' ');
				set(gh('ZHoldMenu'),'Enable','off');
				set(gh('ZHoldCheck'),'Value',1);
				set(gh('ZHoldCheck'),'Enable','off');
				
				%%%Disenables the 3D plotting options menus
				if get(gh('SPlotMenu'),'Value')>6; set(gh('SPlotMenu'),'Value',6); end
				set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Point'});
				set(gh('STypeMenu'),'Enable','off');
				set(gh('CMapMenu'),'Enable','off');
				set(gh('ShadingMenu'),'Enable','off');
				set(gh('LightMenu'),'Enable','off');
				set(gh('LightingMenu'),'Enable','off');
				set(gh('RotateButton'),'Enable','off');
				set(gh('CMapButton'),'Enable','off');
				set(gh('LabelButton'),'Enable','off');
				set(gh('ColorEdit'),'Enable','off');
				set(gh('CheckBox1'),'Enable','off');
				set(gh('SmoothingMenu'),'Enable','off');
				
				% This section extracts variable info and sets up the data structure
				data.filename=data.meta.filename;
				data.xtitle='';
				data.xvalues=[];
				data.xvalueso=data.xvalues;
				data.xrange=1;
				data.ytitle='';
				data.yvalues=[];
				data.yvalueso=data.yvalues;
				data.yrange=1;
				data.ztitle='';
				data.zvalues=[];
				data.zvalueso=data.zvalues;
				data.zrange=1;
				data.cell=sv.firstunit;
				data.wrapped=sv.Wrapped;
				data.binwidth=sv.BinWidth;
				data.anal.error=-1;
				data.anal.errormode=-1;
				data.raw=cell(data.xrange);		%set up dimensions of our cell array
				data.psth=cell(data.xrange);		%and for our resultant psth
				data.bpsth=cell(data.xrange);		%for the burst psth
				data.time=cell(data.xrange);		%and the timebase of the psth
				data.rawspikes=cell(data.xrange);		%and the timebase of the psth
				data.names=cell(data.xrange);		%original fileames for errorchecking
				data.plotburst=0;					%locks us into burst analysis or not
				data.plottonic=0;
				data.measured=0;					%so rowland knows if someone has
				data.fftinfnnpoints=[];				%to store infinity and Not-A-Number values for fft ratios
				data.textload=0;
				data.areaplot=0;
				data.tr = [1];
				filename = [basefilename '.1'];
				if strcmpi(data.filetype,'plx');
				
				else
					data.names=filename;
				end
				switch data.filetype
					case 'plx'
						x=data.pR.exportToRawSpikes(1,sv.firstunit,sv.StartTrial,sv.EndTrial,data.trialtime,data.modtime,cuttime);
						data.names{1} = ['IN:1>' x.name];
					case 'doc'
						x=lsd(filename,sv.firstunit,sv.StartTrial,sv.EndTrial);
					otherwise
						x=lsd2(filename,sv.firstunit,sv.StartTrial,sv.EndTrial,data.trialtime,data.modtime,cuttime);
				end
				x=burst(x,silence_before_burst,first_isi,subsequent_isi,number_burst);
				x.idx = 1;
				data.raw{1}=x;
				if ~isempty(x.error); data.error=x.error; end
				
				%lets make sure our modulation selection is valid
				if get(gh('SEndModToggle'),'Value')==1 || isempty(sv.StartMod) || sv.StartMod<1 || sv.StartMod>sv.EndMod
				  sv.StartMod=1;
				  set(gh('SStartMod'),'String',num2str(sv.StartMod));
				end
				if get(gh('SEndModToggle'),'Value')==1 || isempty(sv.EndMod) || sv.EndMod>x.nummods || sv.EndMod<1
				   sv.EndMod=x.nummods;
				   set(gh('SEndMod'),'String',num2str(sv.EndMod));
				end
				data.nummods = (sv.EndMod - sv.StartMod) + 1;
				data.numtrials = data.raw{1}.numtrials; %this value comes from lsd2.m
				
				[time,psth,rawspikes,sums]=binit(x,sv.BinWidth*10,sv.StartMod,sv.EndMod,sv.StartTrial,sv.EndTrial,sv.Wrapped);
				[time2,bpsth]=binitb(x,sv.BinWidth*10,sv.StartMod,sv.EndMod,sv.StartTrial,sv.EndTrial,sv.Wrapped);
				if get(gh('GaussBox'),'Value')==1 %checks if the user wants smoothing
					sigma=str2double(get(gh('GaussEdit'),'String'));
					psth=gausssmooth(time,psth,sigma);
					bpsth=gausssmooth(time2,bpsth,sigma);
				end
				data.bpsth{1}=bpsth;
				data.psth{1}=psth;
				data.time{1}=time;
				data.rawspikes{1}=rawspikes;
				data.sums{1}=sums;
				
			case 1  %this means we have only 1 variable
				%%%Change Hold X & Hold Y pull down menu labels to something
				%%%meaningful
				if strcmp(sv.loaded,'yes')
					sv.xholdold=get(gh('XHoldMenu'),'Value');
					sv.yholdold=0;
					sv.zholdold=0;
					sv.xholdoldval=get(gh('XHoldMenu'),'String');
					sv.yholdoldval=[];
					sv.zholdoldval=[];
					if iscell(sv.yholdoldval)
						sv.xholdoldval=str2double(sv.xholdoldval{sv.xholdold});
					else
						sv.xholdoldval=[];
					end
				end
				set(gh('HoldXText'),'String','Held X Value');
				set(gh('XHoldMenu'),'Value',1);
				set(gh('XHoldMenu'),'String',' ');
				set(gh('XHoldMenu'),'Enable','on');
				set(gh('XHoldCheck'),'Enable','on');
				set(gh('HoldYText'),'String','');
				set(gh('YHoldMenu'),'Value',1);
				set(gh('YHoldMenu'),'String',' ');
				set(gh('YHoldMenu'),'Enable','off');
				set(gh('YHoldCheck'),'Value',1);
				set(gh('YHoldCheck'),'Enable','off');
				set(gh('HoldZText'),'String','');
				set(gh('ZHoldMenu'),'Value',1);
				set(gh('ZHoldMenu'),'String',' ');
				set(gh('ZHoldMenu'),'Enable','off');
				set(gh('ZHoldCheck'),'Value',1);
				set(gh('ZHoldCheck'),'Enable','off');
				
				%%%Set the plotting options
				if get(gh('SPlotMenu'),'Value')>6; set(gh('SPlotMenu'),'Value',6); end
				set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Curve'});
				set(gh('STypeMenu'),'String',{'Normal';'Polar';'Polar+Error';'Cartesian Polar+Error'});
				set(gh('STypeMenu'),'Enable','on');
				set(gh('CMapMenu'),'Enable','off');
				set(gh('ShadingMenu'),'Enable','off');
				set(gh('LightMenu'),'Enable','off');
				set(gh('LightingMenu'),'Enable','off');
				set(gh('RotateButton'),'Enable','off');
				set(gh('CMapButton'),'Enable','off');
				set(gh('LabelButton'),'Enable','off');
				set(gh('ColorEdit'),'Enable','off');
				set(gh('CheckBox1'),'Enable','off');
				set(gh('SmoothingMenu'),'String',{'none';'interpolated';'polynomial';'smoothed'});
				set(gh('SmoothingMenu'),'Value',1);
				set(gh('CheckBox1'),'Enable','on');
				
				firstnumber=min(data.meta.matrix(:,1));   %tells us the first and last file to load
				lastnumber=max(data.meta.matrix(:,1));
				% This section extracts variable info and sets up the data structure
				data.filename=data.meta.filename;
				
				data.xtitle=regexprep(data.meta.var{1}.title,'w\\o','with O');
				data.xrange=data.meta.var{1}.range;
				data.xvalues=data.meta.var{1}.values;
				data.xvalueso=data.xvalues;
				
				data.ytitle='';
				data.yvalues=[];
				data.yrange=1;
				data.yvalueso=data.yvalues;
				
				data.ztitle='';
				data.zvalues=[];
				data.zrange=1;
				data.zvalueso=data.zvalues;
				
				data.cell=sv.firstunit;
				data.wrapped=sv.Wrapped;
				data.binwidth=sv.BinWidth;
				data.anal.error=-1;
				data.anal.errormode=-1;
				data.raw=cell(1,data.xrange);		%set up dimensions of our cell array
				data.psth=cell(1,data.xrange);		%and for our resultant psth
				data.bpsth=cell(1,data.xrange);		%for the burst psth
				data.time=cell(1,data.xrange);		%and the timebase of the psth
				data.rawspikes=cell(1,data.xrange);		%and the timebase of the psth
				data.sums=cell(1,data.xrange);		%and the timebase of the psth
				data.names=cell(1,data.xrange);		%original fileames for errorchecking
				data.plotburst=0;					%locks us into burst analysis or not
				data.plottonic=0;
				data.measured=0;					%so rowland knows if someone has
				data.fftinfnnpoints=[];				%to store infinity and Not-A-Number values for fft ratios
				data.textload=0;
				data.areaplot=0;
				data.tr = [];
				%h=waitbar(0,'Processing: binning data and finding bursts...');
				for i=firstnumber:lastnumber
					set(gh('LoadText'),'String',['Loading - ' num2str(i) ' of ' num2str(lastnumber)]);
					drawnow;
					if strcmpi(data.filetype,'plx');
				
					else
						filename = [basefilename '.' int2str(i)];
						filenamet = [filename ' ' num2str(data.meta.matrix(i,end))]; %add variable value to name
						filenamet = regexprep(filenamet,'\s+',' ');
						data.names{i}=filenamet;
					end
					switch data.filetype
						case 'plx'
							data.tr = [data.tr i];
							x=data.pR.exportToRawSpikes(i,sv.firstunit,sv.StartTrial,sv.EndTrial,data.trialtime,data.modtime,cuttime);
							data.names{i} = ['IN:' num2str(i) '>' x.name];
						case 'doc'
							x=lsd(filename,sv.firstunit,sv.StartTrial,sv.EndTrial);
						otherwise
							x=lsd2(filename,sv.firstunit,sv.StartTrial,sv.EndTrial,data.trialtime,data.modtime,cuttime);
					end
					x=burst(x,silence_before_burst,first_isi,subsequent_isi,number_burst);
					x.idx = i;
					data.raw{i}=x;
					if ~isempty(x.error); data.error=cat(1,data.error,x.error); end
					
					%lets make sure our modulation selection is valid
					if get(gh('SEndModToggle'),'Value')==1 || isempty(sv.StartMod) || sv.StartMod<1 || sv.StartMod>sv.EndMod
					  sv.StartMod=1;
					  set(gh('SStartMod'),'String',num2str(sv.StartMod));
					end
					if get(gh('SEndModToggle'),'Value')==1 || isempty(sv.EndMod) || sv.EndMod>x.nummods || sv.EndMod<1
					   sv.EndMod=x.nummods;
					   set(gh('SEndMod'),'String',num2str(sv.EndMod));
					end
					data.nummods = (sv.EndMod - sv.StartMod) + 1;
					data.numtrials = data.raw{1}.numtrials; %this value comes from lsd2.m
					
					[time,psth,rawspikes,sums]=binit(x,sv.BinWidth*10,sv.StartMod,sv.EndMod,sv.StartTrial,sv.EndTrial,sv.Wrapped);
					[time2,bpsth]=binitb(x,sv.BinWidth*10,sv.StartMod,sv.EndMod,sv.StartTrial,sv.EndTrial,sv.Wrapped);
					if get(gh('GaussBox'),'Value')==1 %checks if the user wants smoothing
						sigma=str2double(get(gh('GaussEdit'),'String'));
						psth=gausssmooth(time,psth,sigma);
						bpsth=gausssmooth(time2,bpsth,sigma);
					end
					data.bpsth{i}=bpsth;
					data.psth{i}=psth;
					data.time{i}=time;
					data.rawspikes{i}=rawspikes;
					data.sums{i}=sums;
					% 			waitbar(i/((data.xrange+1)-1));
				end
				% 		close(h);
				
			case 2 % we have 2 variables
				
				%%%Makes sure that menus say the right thing and are enabled
				if strcmp(sv.loaded,'yes')
					sv.xholdold=get(gh('XHoldMenu'),'Value');
					sv.yholdold=get(gh('YHoldMenu'),'Value');
					sv.zholdold=0;
					sv.xholdoldval=get(gh('XHoldMenu'),'String');
					sv.yholdoldval=get(gh('YHoldMenu'),'String');
					sv.zholdoldval='';
					if iscell(sv.yholdoldval);
						sv.xholdoldval=str2double(sv.xholdoldval{sv.xholdold});
					else
						sv.xholdoldval=[];
					end;
					if iscell(sv.yholdoldval);
						sv.yholdoldval=str2double(sv.yholdoldval{sv.yholdold});
					else
						sv.yholdoldval=[];
					end;
				end
				set(gh('HoldXText'),'String','Hold X Value');
				set(gh('XHoldMenu'),'Value',1);
				set(gh('XHoldMenu'),'String',' ');
				set(gh('XHoldMenu'),'Enable','on');
				set(gh('XHoldCheck'),'Enable','on');
				set(gh('HoldYText'),'String','Hold Y Value');
				set(gh('YHoldMenu'),'Value',1);
				set(gh('YHoldMenu'),'String',' ')
				set(gh('YHoldMenu'),'Enable','on');
				set(gh('YHoldCheck'),'Value',1);
				set(gh('YHoldCheck'),'Enable','on');
				set(gh('ZHoldMenu'),'Value',1);
				set(gh('ZHoldMenu'),'String',' ');
				set(gh('ZHoldMenu'),'Enable','off');
				set(gh('ZHoldCheck'),'Value',1);
				set(gh('ZHoldCheck'),'Enable','off');
				set(gh('HoldZText'),'String','');
				
				%%%Set the plotting options
				if get(gh('SPlotMenu'),'Value')>7; set(gh('SPlotMenu'),'Value',7); end
				if get(gh('SPlotMenu'),'Value')==6; set(gh('SPlotMenu'),'Value',7); end
				set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Curve';'Surface'});
				set(gh('STypeMenu'),'Enable','on');
				set(gh('CMapMenu'),'Enable','on');
				set(gh('ShadingMenu'),'Enable','on');
				set(gh('LightMenu'),'Enable','on');
				set(gh('LightingMenu'),'Enable','on');
				set(gh('RotateButton'),'Enable','on');
				set(gh('CMapButton'),'Enable','on');
				set(gh('LabelButton'),'Enable','on');
				set(gh('ColorEdit'),'Enable','on');
				set(gh('CheckBox1'),'Enable','on');
				set(gh('SmoothingMenu'),'String',{'none';'cubic';'spline';'linear';'nearest'});
				set(gh('SmoothingMenu'),'Value',1);
				set(gh('CheckBox1'),'Enable','on');
				
				firstnumber=min(data.meta.matrix(:,1));   %tells us the first and last file to load
				lastnumber=max(data.meta.matrix(:,1));
				
				% This section extracts variable info and sets up the data structure
				data.filename=data.meta.filename;
				
				data.xtitle=regexprep(data.meta.var{1}.title,'w\\ o','with O');
				data.xrange=data.meta.var{1}.range;
				data.xvalues=data.meta.var{1}.values;
				data.xvalueso=data.xvalues;
				
				data.ytitle=regexprep(data.meta.var{2}.title,'w\\ o','with O');
				data.yrange=data.meta.var{2}.range;
				data.yvalues=data.meta.var{2}.values;
				data.yvalueso=data.yvalues;
				
				data.ztitle='';
				data.zvalues=[];
				data.zrange=1;
				data.zvalueso=data.zvalues;
				
				data.cell=sv.firstunit;
				data.wrapped=sv.Wrapped;
				data.binwidth=sv.BinWidth;
				data.anal.error=-1;
				data.anal.errormode=-1;
				data.raw=cell(data.yrange,data.xrange);		%set up dimensions of our cell array
				data.psth=cell(data.yrange,data.xrange);	%and for our resultant psth
				data.bpsth=cell(data.yrange,data.xrange);
				data.time=cell(data.yrange,data.xrange);	%and the timebase of the psth
				data.rawspikes=cell(data.yrange,data.xrange);
				data.sums=cell(data.yrange,data.xrange);
				data.names=cell(data.yrange,data.xrange);
				data.plotburst=0;
				data.plottonic=0;
				data.measured=0;		   					%so rowland knows if someone has
				data.textload=0;
				data.areaplot=0;
				data.tr = [];
				for i=firstnumber:lastnumber
					set(gh('LoadText'),'String',['Loading - ' num2str(i) ' of ' num2str(lastnumber)]);
					drawnow;
					if strcmpi(data.filetype,'plx');
				
					else
						filename = strcat(basefilename,'.',int2str(i));
						filenamet = [filename ' ' num2str(data.meta.matrix(i,end-1:end))];
						filenamet = regexprep(filenamet,'\s+',' ');
						data.names{i}=filenamet;
					end
					switch data.filetype
						case 'plx'
							data.tr = [data.tr i];
							x=data.pR.exportToRawSpikes(i,sv.firstunit,sv.StartTrial,sv.EndTrial,data.trialtime,data.modtime,cuttime);
							data.names{i} = ['#' num2str(i) '>' x.name];
						case 'doc'
							x=lsd(filename,sv.firstunit,sv.StartTrial,sv.EndTrial);
						otherwise
							x=lsd2(filename,sv.firstunit,sv.StartTrial,sv.EndTrial,data.trialtime,data.modtime,cuttime);
					end
					x=burst(x,silence_before_burst,first_isi,subsequent_isi,number_burst);
					x.idx = i;
					data.raw{i}=x;
					if ~isempty(x.error); data.error=cat(1,data.error,x.error); end
					
					%lets make sure our modulation selection is valid
					if get(gh('SEndModToggle'),'Value')==1 || isempty(sv.StartMod) || sv.StartMod<1 || sv.StartMod>sv.EndMod
					  sv.StartMod=1;
					  set(gh('SStartMod'),'String',num2str(sv.StartMod));
					end
					if get(gh('SEndModToggle'),'Value')==1 || isempty(sv.EndMod) || sv.EndMod>x.nummods || sv.EndMod<1
					   sv.EndMod=x.nummods;
					   set(gh('SEndMod'),'String',num2str(sv.EndMod));
					end
					data.nummods = (sv.EndMod - sv.StartMod) + 1;
					data.numtrials = data.raw{1}.numtrials; %this value comes from lsd2.m
					
					[time,psth,rawspikes,sums]=binit(x,sv.BinWidth*10,sv.StartMod,sv.EndMod,sv.StartTrial,sv.EndTrial,sv.Wrapped);
					[time2,bpsth]=binitb(x,sv.BinWidth*10,sv.StartMod,sv.EndMod,sv.StartTrial,sv.EndTrial,sv.Wrapped);
					if get(gh('GaussBox'),'Value')==1 %checks if the user wants smoothing
						sigma=str2double(get(gh('GaussEdit'),'String'));
						psth=gausssmooth(time,psth,sigma);
						bpsth=gausssmooth(time2,bpsth,sigma);
					end
					data.bpsth{i}=bpsth;
					data.psth{i}=psth;
					data.time{i}=time;
					data.rawspikes{i}=rawspikes;
					data.sums{i}=sums;
					% 			waitbar(i/((data.xrange*data.yrange+1)-1));
				end
				% 		close(h);
				
			case 3  % we have 3 variables
				%%%Makes sure that menus say the right thing and are enabled
				if strcmp(sv.loaded,'yes')
					sv.xholdold=get(gh('XHoldMenu'),'Value');
					sv.yholdold=get(gh('YHoldMenu'),'Value');
					sv.zholdold=get(gh('ZHoldMenu'),'Value');
					sv.xholdoldval=get(gh('XHoldMenu'),'String');
					sv.yholdoldval=get(gh('YHoldMenu'),'String');
					sv.zholdoldval=get(gh('ZHoldMenu'),'String');
					if iscell(sv.yholdoldval);
						sv.xholdoldval=str2double(sv.xholdoldval{sv.xholdold});
					else
						sv.xholdoldvalue=[];
					end;
					if iscell(sv.yholdoldval);
						sv.yholdoldval=str2double(sv.yholdoldval{sv.yholdold});
					else
						sv.yholdoldvalue=[];
					end;
					if iscell(sv.zholdoldval);
						sv.zholdoldval=str2double(sv.zholdoldval{sv.zholdold});
					else
						sv.zholdoldvalue=[];
					end;
				end
				set(gh('HoldXText'),'String','Hold X Value');
				set(gh('XHoldMenu'),'Value',1);
				set(gh('XHoldMenu'),'String',' ');
				set(gh('XHoldMenu'),'Enable','on');
				set(gh('XHoldCheck'),'Enable','on');
				set(gh('HoldYText'),'String','Hold Y Value');
				set(gh('YHoldMenu'),'Value',1);
				set(gh('YHoldMenu'),'String',' ')
				set(gh('YHoldMenu'),'Enable','on');
				set(gh('YHoldCheck'),'Value',1);
				set(gh('YHoldCheck'),'Enable','on');
				set(gh('HoldZText'),'String','Hold Z Value');
				set(gh('ZHoldMenu'),'Value',1);
				set(gh('ZHoldMenu'),'String',' ');
				set(gh('ZHoldMenu'),'Enable','on');
				set(gh('ZHoldCheck'),'Enable','on');
				set(gh('ZHoldCheck'),'Value',1);
				
				%%%Set the plotting options
				if get(gh('SPlotMenu'),'Value')>7; set(gh('SPlotMenu'),'Value',7); end
				set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Curve';'Surface'});
				set(gh('STypeMenu'),'Enable','on');
				set(gh('CMapMenu'),'Enable','on');
				set(gh('ShadingMenu'),'Enable','on');
				set(gh('LightMenu'),'Enable','on');
				set(gh('LightingMenu'),'Enable','on');
				set(gh('RotateButton'),'Enable','on');
				set(gh('CMapButton'),'Enable','on');
				set(gh('LabelButton'),'Enable','on');
				set(gh('ColorEdit'),'Enable','on');
				set(gh('CheckBox1'),'Enable','on');
				set(gh('SmoothingMenu'),'String',{'none';'cubic';'spline';'linear';'nearest'});
				set(gh('SmoothingMenu'),'Value',1);
				set(gh('CheckBox1'),'Enable','on');
				
				% this section juggles all the variables around for selection
				data.filename=data.meta.filename;
				
				data.xtitle=regexprep(data.meta.var{1}.title,'w\\ o','with O');
				data.xrange=data.meta.var{1}.range;
				data.xvalues=data.meta.var{1}.values;
				data.xvalueso=data.xvalues;
				
				data.ytitle=regexprep(data.meta.var{2}.title,'w\\ o','with O');
				data.yrange=data.meta.var{2}.range;
				data.yvalues=data.meta.var{2}.values;
				data.yvalueso=data.yvalues;
				
				data.ztitle=regexprep(data.meta.var{3}.title,'w\\ o','with O');
				data.zrange=data.meta.var{3}.range;
				data.zvalues=data.meta.var{3}.values;
				data.zvalueso=data.zvalues;
				
				%defaults for first run
				data.cell=sv.firstunit;
				data.wrapped=sv.Wrapped;
				data.binwidth=sv.BinWidth;
				data.anal.error=-1;
				data.anal.errormode=-1;
				% set up our data structure, using cells for each set of spikes
				data.raw=cell(data.yrange,data.xrange,data.zrange);	   %set up dimensions of our cell array for sparse matrix
				data.psth=cell(data.yrange,data.xrange,data.zrange);	  %and for our resultant psth
				data.bpsth=cell(data.yrange,data.xrange,data.zrange);	%psth generated from burst spikes
				data.time=cell(data.yrange,data.xrange,data.zrange);	  %the timebase of the psth
				data.rawspikes=cell(data.yrange,data.xrange,data.zrange);
				data.sums=cell(data.yrange,data.xrange,data.zrange);
				data.names=cell(data.yrange,data.xrange,data.zrange);  %file names to track which data is where
				data.plotburst=0;
				data.plottonic=0;
				data.measured=0;		   %so rowland knows if someone has
				data.textload=0;
				data.areaplot=0;
				fileindex=find(data.meta.matrix(:,sv.HeldVariable+1)==sv.HeldValue); %index the files needed...
				
				index=data.meta.matrix(:,2:4); %the list of variable values for each file
				tr = 1:(data.xrange*data.yrange*data.zrange);
				tr = [tr(mod(tr,2)>0), tr(mod(tr,2)==0)];
				data.tr = tr;
				for i=1:data.xrange*data.yrange*data.zrange
					set(gh('LoadText'),'String',['Loading - ' num2str(i) ' of ' num2str(data.xrange*data.yrange*data.zrange)]);
					drawnow;
					filename = [basefilename '.' int2str(i)];
					filenamet = [filename ' ' num2str(data.meta.matrix(i,end-2:end))];
					filenamet = regexprep(filenamet,'\s+',' ');
					if strcmpi(data.filetype,'plx');
						[yi,xi,zi] = ind2sub(size(data.raw),i);
					else
						xi=index(i,1);
						yi=index(i,2);
						zi=index(i,3);
						data.names{yi,xi,zi}=filenamet;
					end
					switch data.filetype
						case 'plx'
							x=data.pR.exportToRawSpikes(tr(i),sv.firstunit,sv.StartTrial,sv.EndTrial,data.trialtime,data.modtime,cuttime);
							data.names{yi,xi,zi} = ['IN:' num2str(i) '>' x.name];
						case 'doc'
							x=lsd(filename,sv.firstunit,sv.StartTrial,sv.EndTrial);
						otherwise
							x=lsd2(filename,sv.firstunit,sv.StartTrial,sv.EndTrial,data.trialtime,data.modtime,cuttime);
					end
					x=burst(x,silence_before_burst,first_isi,subsequent_isi,number_burst);
					x.idx = i;
					data.raw{yi,xi,zi}=x;
					%lets make sure our modulation selection is valid
					if isempty(sv.StartMod) || sv.StartMod<1 || sv.StartMod>sv.EndMod
					  sv.StartMod=1;
					  set(gh('SStartMod'),'String',num2str(sv.StartMod));
					end
					if get(gh('SEndModToggle'),'Value')==1 || isempty(sv.EndMod) || sv.EndMod>x.nummods || sv.EndMod<1
					   sv.EndMod=x.nummods;
					   set(gh('SEndMod'),'String',num2str(sv.EndMod));
					end
					data.nummods = (sv.EndMod - sv.StartMod) + 1;
					data.numtrials = x.numtrials; %this value comes from lsd2.m
					
					[time,psth,rawspikes,sums]=binit(x,sv.BinWidth*10,sv.StartMod,sv.EndMod,sv.StartTrial,sv.EndTrial,sv.Wrapped);
					[time2,bpsth]=binitb(x,sv.BinWidth*10,sv.StartMod,sv.EndMod,sv.StartTrial,sv.EndTrial,sv.Wrapped);
					if get(gh('GaussBox'),'Value')==1 %checks if the user wants smoothing
						sigma=str2double(get(gh('GaussEdit'),'String'));
						psth=gausssmooth(time,psth,sigma);
						bpsth=gausssmooth(time2,bpsth,sigma);
					end
					if ~isempty(x.error); data.error=cat(1,data.error,x.error); end
					data.bpsth{yi,xi,zi}=bpsth;
					data.psth{yi,xi,zi}=psth;
					data.time{yi,xi,zi}=time;
					data.rawspikes{yi,xi,zi}=rawspikes;
					data.sums{yi,xi,zi}=sums;
				end
		end
		
		if data.numvars>1
			yvals=num2str(data.yvalues);
			yvals=regexprep(yvals,'\s+',' ');
			set(gh('SYSlice'),'String',yvals);
		end
		
		switch data.numvars %now we set our variable selection menus
			case 0
				sv.xval=1;
				sv.yval=1;
				sv.zval=1;
				set(gh('SXSlice'),'String',' ');
				set(gh('SYSlice'),'String',' ');
			case 1
				set(gh('XHoldMenu'),'String',{num2str(data.xvalues')});
				if sv.xholdold>0 && sv.xholdold<=data.xrange && strcmp(sv.loaded,'yes');
					set(gh('XHoldMenu'),'Value',sv.xholdold);
				else
					set(gh('XHoldMenu'),'Value',ceil(data.xrange/2));
				end
				sv.xval=get(gh('XHoldMenu'),'Value');
				sv.yval=1;
				sv.zval=1;
				xvals=regexprep(num2str(data.xvalues),'\s+',' ');
				set(gh('SXSlice'),'String',xvals);
				set(gh('SYSlice'),'String',' ');
			case 2
				set(gh('XHoldMenu'),'String',{num2str(data.xvalues')});
				if sv.xholdold>0 && sv.xholdold<=data.xrange && strcmp(sv.loaded,'yes');
					set(gh('XHoldMenu'),'Value',sv.xholdold);
				else
					set(gh('XHoldMenu'),'Value',ceil(data.xrange/2));
				end
				set(gh('YHoldMenu'),'String',{num2str(data.yvalues')});
				if sv.yholdold>0 && sv.yholdold<=data.yrange && strcmp(sv.loaded,'yes');
					set(gh('YHoldMenu'),'Value',sv.yholdold);
				else
					set(gh('YHoldMenu'),'Value',ceil(data.yrange/2));
				end
				sv.xval=get(gh('XHoldMenu'),'Value');
				sv.yval=get(gh('YHoldMenu'),'Value');
				sv.zval=1;
				xvals=regexprep(num2str(data.xvalues),'\s+',' ');
				set(gh('SXSlice'),'String',xvals);
				yvals=regexprep(num2str(data.yvalues),'\s+',' ');
				set(gh('SYSlice'),'String',yvals);
			otherwise
				set(gh('XHoldMenu'),'String',{num2str(data.xvalues')});
				set(gh('XHoldMenu'),'Value',ceil(data.xrange/2));
				set(gh('YHoldMenu'),'String',{num2str(data.yvalues')});
				set(gh('YHoldMenu'),'Value',ceil(data.yrange/2));
				set(gh('ZHoldMenu'),'String',{num2str(data.zvalues')});
				set(gh('ZHoldMenu'),'Value',ceil(data.zrange/2));
				sv.xval=get(gh('XHoldMenu'),'Value');
				sv.yval=get(gh('YHoldMenu'),'Value');
				sv.zval=get(gh('ZHoldMenu'),'Value');
				xvals=regexprep(num2str(data.xvalues),'\s+',' ');
				set(gh('SXSlice'),'String',xvals);
				yvals=regexprep(num2str(data.yvalues),'\s+',' ');
				set(gh('SYSlice'),'String',yvals);
		end
		set(gh('XHoldCheck'),'Value',0);
		set(gh('YHoldCheck'),'Value',1);
		set(gh('ZHoldCheck'),'Value',1);
		sv.xlock=0;
		sv.ylock=1;
		sv.zlock=1;
		data.xindex=1:data.xrange;
		data.yindex=1:data.yrange;
		
		set(gh('SStartTrial'),'String',num2str(sv.StartTrial));
		set(gh('SEndTrial'),'String',num2str(sv.EndTrial));
		set(gh('SStartMod'),'String',num2str(sv.StartMod));
		set(gh('SEndMod'),'String',num2str(sv.EndMod));
		set(gh('SBinWidth'),'String',num2str(sv.BinWidth));
		
		
		set(gh('LoadText'),'String','Plot All Spikes ON');
		set(gh('AnalMenu'),'Value',1);
		
		if ~strcmp(sv.auto,'report')
			endclock=etime(clock,startclock);
			endcpu=cputime-startcpu;
			set(sv.uihandle,'Name', [sv.title ' | Loading took: ' num2str(endclock) 'secs / CPU time:' num2str(endcpu) 'secs']);
			time=[];
		end
		
		if strcmp(sv.auto,'no') %if we manually load, set an initial PSTH measurement
			set(gh('SMinEdit'),'UserData','yes');
			set(gh('SMaxEdit'),'UserData','yes');
			mint=str2double(get(gh('SMinEdit'),'String'));
			maxt=str2double(get(gh('SMaxEdit'),'String'));
			if isempty(mint) || str2double(mint)<min(data.time{1})
				mint=min(data.time{1});
				set(gh('SMinEdit'),'String',num2str(min(data.time{1})));
			end
			if isempty(maxt) || str2double(maxt)>max(data.time{1})
				maxt=max(data.time{1});
				set(gh('SMaxEdit'),'String',num2str(max(data.time{1})));
			end
		elseif strcmp(sv.auto,'report')
			mint=sv.mintime;
			maxt=sv.maxtime;
		end
		set(gca,'Tag','SpikeFigMainAxes');
		spikes('Measure');
		sv.loaded='yes';
		
		%-----------Set up our history mechanism-----------
		history=get(gh('spikehistory'),'String');
		newitem=[data.sourcepath ' | Cell ' num2str(sv.firstunit)];
		hsize=40;
		if ischar(history)
			history={history};
		end
		if max(strcmp(newitem,history))<1 && ~strcmp(sv.auto,'report')
			if size(history,1)>hsize
				history=([newitem;history(1:hsize)]); %prunes the history list
			elseif strcmp(history(end),' ')
				history=([newitem;history(1:end-1)]); %removes dummy space
			else
				history=([newitem;history]);
			end
			set(gh('spikehistory'),'String',history);
			set(gh('spikehistory'),'Value',1);
		end
		%---------------------------------------------------
		
		if strcmp(sv.reload,'yes'); %ensures only non-reloaded data shows info box
			sv.reload='no';
		elseif ~strcmp(sv.auto,'report')
			spikes('Data Info');
		end
		if exist([sv.historypath 'data.mat'],'file');delete([sv.historypath 'data.mat']); end;
		
		if ~isempty(data.error) && get(gh('SShowError'),'Value')==1 %show the possible	data errors
			warndlg(cat(1,data.error,{' ';'If trials were removed for one variable, please re-run removing the last trial manually for all the data; this happens because VSX fails to tag some spikes properly.'}));
		end
		
		%-----------------------Set Spike Type to Measure------------------------------------
	case 'SpikeSet'
		%---------------------------------------------------------------------------------------------
		
		switch get(gh('SpikeMenu'),'Value');
			case 1 %all spikes
				data.areaplot=0;
				automeasure=0;
				data.plotburst=0;
				data.plottonic=0;
				set(gh('AnalysisMenu'),'Enable','on');
				set(gh('LoadText'),'String','Plot All Spikes ON');
				set(gca,'Tag','SpikeFigMainAxes');
				sv.AnalysisMethod=get(gh('AnalysisMenu'),'Value') ;
			case 2 %burst spikes
				data.areaplot=0;
				data.plotburst=1;
				data.plottonic=0;
				set(gh('AnalysisMenu'),'Enable','on');
				set(gca,'Tag','SpikeFigMainAxes');
				set(gh('LoadText'),'String','Burst Analysis ON');
				sv.AnalysisMethod=get(gh('AnalysisMenu'),'Value') ;
			case 3 %subtract burst from all to get tonic, only surfaces etc
				data.areaplot=0;
				data.plottonic=1;
				data.plotburst=0;
				set(gh('AnalysisMenu'),'Enable','off');
				set(gca,'Tag','SpikeFigMainAxes');
				set(gh('LoadText'),'String','TONIC Analysis ON');
			otherwise
				errordlg('Spike Selection Error');
				error('spike selection error in spikeset');
		end
		
		%---------------------Taking measurements from a reference PSTH-------------------
	case 'Measure'
		%---------------------------------------------------------------------------------------------------
		
		data.areaplot=0;
		data.measured=1;
		
		data.fftinfo=[];
		data.fftinfnnpoints=[];
		
		mint=sv.mint;
		maxt=sv.maxt;
		
		if get(gh('SOverrideTime'),'Value') == 1
			mint=0;
			if data.wrapped==1
				maxt=ceil(data.modtime/10);
			else
				maxt=ceil(data.trialtime/10);
			end
			maxt=data.time{1}(ceil(maxt/data.binwidth));
		elseif sv.MeasureButton == true
			sv.MeasureButton = false;
			if automeasure < 1 && sv.AnalysisMethod~=6
				[mint,maxt]=measure(data,sv.xval,sv.yval,sv.zval);
			end
		else
			time=data.time{1};
			if isempty(mint) || mint < 0 || isnan(mint) || mint >= max(time)
				mint=0; 
			end
			if isempty(maxt) || maxt>max(time) || isnan(maxt) 
				maxt=max(time);
			end
			mint=mint+0.0001;
			maxt=maxt+0.0001;
			
			mint=time(ceil(mint/data.binwidth));
			maxt=time(ceil(maxt/data.binwidth));
		end
		
		if ~isempty(findobj('tag','MovieToolFig')) && automeasure<1 %if the movie program is already there
			CreateMovie; %just reruns initialisation for the new timeslice
		end
		
		if sv.AnalysisMethod==6  %we want to be seen to use all of it for ffts
			mint=min(data.time{1});
			maxt=max(data.time{1});
		end
		
		set(gh('SMinEdit'),'String',num2str(mint));
		set(gh('SMaxEdit'),'String',num2str(maxt));
		sv.mint=mint;
		sv.maxt=maxt;
		
		String=get(gh('ErrorMenu'),'String');
		Value=get(gh('ErrorMenu'),'Value');
		err=String{Value};
		
		if data.plotburst==1
			rawpsth=data.bpsth;
		elseif data.plotburst==0
			rawpsth=data.psth;
		end
		
		tmat=zeros(data.yrange,data.xrange,data.zrange);	%the data matrix
		emat=zeros(data.yrange,data.xrange,data.zrange);	%the error matrix
		
		if isfield(data,'plottonic') && data.plottonic==1
			sv.AnalysisMethod=7;
		end
		%axes(gh('SpikeFigMainAxes'));
		
		switch(sv.AnalysisMethod)
			%================================================We are using the mean
			case 1
				mini=find(data.time{1}==mint);
				maxi=find(data.time{1}==maxt);
				time=(maxi-mini)*data.binwidth;  %doesn't correct, same as original VS
				%time=((maxi+1)-mini)*data.binwidth;  %corrects for the extra binwidth
				for i=1:data.yrange*data.xrange*data.zrange
					x=sum(rawpsth{i}(mini:maxi));
					if data.wrapped==1 %wrapped
						x=x/(data.numtrials*data.nummods); %we have to get the values for an individual trial
					elseif data.wrapped==2
						x=x/(data.numtrials);
					end
					if data.plotburst==1 && x>0
						e=finderror(data.raw{i},err,mint,maxt+data.binwidth,data.wrapped,1);
					elseif x>0
						e=finderror(data.raw{i},err,mint,maxt+data.binwidth,data.wrapped,0);
					else
						e=0;
					end
					
					x=(x/time)*1000; %convert into spikes/second
					
					if strcmp(sv.ErrorMode,'Fano Factor') || strcmp(sv.ErrorMode,'Coefficient of Variation') || strcmp(sv.ErrorMode,'Allan Factor')
					else
						e=(e/time)*1000;
					end
					tmat(i)=x;
					emat(i)=e;
				end
				
				%================================================We are using the Peak
			case 2
				mini=find(data.time{1}==mint); %find the index for the times
				maxi=find(data.time{1}==maxt);
				for i=1:data.yrange*data.xrange*data.zrange
					m=max(rawpsth{i}(mini:maxi));	  %look for the maximum in the range specified
					if m>0				   %the value is greater than 0
						n=find(rawpsth{i}(mini:maxi)==m);   %find the points where max occurs
						if size(n,2)>1			%there is more than 1 position
							n=n(1);				%so we just select the first
						end
						n=n+(mini-1);			 %to get the index into PSTH we add the mini index
						if n>1 && n<length(rawpsth{1}) % somewhere in the psth
							x=(sum(rawpsth{i}(n-1:n+1)));
							mit=data.time{i}(n-1);
							mxt=data.time{i}(n+1)+data.binwidth;
							if data.plotburst==1
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,1);
							else
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,0);
							end
							if data.wrapped==1
								x=x/(data.numtrials*data.nummods); %we have to get the values for an individual trial
							elseif data.wrapped==2
								x=x/(data.numtrials);
							end
						elseif n==length(rawpsth{1}) %we are at the end of the psth
							x=(sum(rawpsth{i}(n-2:n)));
							mit=data.time{i}(n-2);
							mxt=data.time{i}(n)+data.binwidth;
							if data.plotburst==1
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,1);
							else
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,0);
							end
							if data.wrapped==1
								x=x/(data.numtrials*data.nummods); %we have to get the values for an individual trial
							elseif data.wrapped==2
								x=x/(data.numtrials);
							end
						elseif n==1 %we are at the beginning
							x=(sum(rawpsth{i}(n:n+2)));
							mit=data.time{i}(n);
							mxt=data.time{i}(n+2)+data.binwidth;
							if data.plotburst==1
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,1);
							else
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,0);
							end
							if data.wrapped==1
								x=x/(data.numtrials*data.nummods); %we have to get the values for an individual trial
							elseif data.wrapped==2
								x=x/(data.numtrials);
							end
						end
						x=(x/(data.binwidth*3))*1000;	 %convert into spikes/second
						e=(e/(data.binwidth*3))*1000;
						tmat(i)=x;
						emat(i)=e;
					else  %data is just all zero values
						tmat(i)=0;
						emat(i)=0;
					end
				end
				
			case 3 %We are using the Peak using only 1 bin
				
				mini=find(data.time{1}==mint); %find the index for the times
				maxi=find(data.time{1}==maxt);
				for i=1:data.yrange*data.xrange*data.zrange
					m=max(rawpsth{i}(mini:maxi));		%look for the maximum in the range specified
					if m>0				   %the value is greater than 0
						n=find(rawpsth{i}(mini:maxi)==m);	 %find the points where max occurs
						if size(n,2)>1			%there is more than 1 position
							n=n(1);				%so we just select the first
						end
						n=n+(mini-1);			 %to get the index into PSTH we add the mini index
						if n>1 && n<length(rawpsth{1})	 %check if we are at the beginning
							x=(sum(rawpsth{i}(n)));			  %Peak is just 1 bin
							mit=data.time{i}(n);
							mxt=data.time{i}(n)+data.binwidth;
							if data.plotburst==1
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,1);
							else
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,0);
							end
							if data.wrapped==1
								x=x/(data.numtrials*data.nummods); %we have to get the values for an individual trial
							elseif data.wrapped==2
								x=x/(data.numtrials);
							end
						else
							x=(sum(rawpsth{i}(n)));	  %Peak is the average over 3 bins starting at 1
							mit=data.time{i}(n);
							mxt=data.time{i}(n)+data.binwidth;
							if data.plotburst==1
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,1);
							else
								e=finderror(data.raw{i},err,mint,maxt,data.wrapped,0);
							end
							if data.wrapped==1
								x=x/(data.numtrials*data.nummods); %we have to get the values for an individual trial
							elseif data.wrapped==2
								x=x/(data.numtrials);
							end
						end
						x=(x/(data.binwidth))*1000;	 %convert into spikes/second
						e=(e/(data.binwidth))*1000;
						tmat(i)=x;
						emat(i)=e;
					else  %data is just all zero values
						tmat(i)=0;
						emat(i)=0;
					end
				end
				
				
			case 4 %We are using the count
				mini=find(data.time{1}==mint);
				maxi=find(data.time{1}==maxt);
				%time=(maxi-(mini-1))*data.binwidth;
				for i=1:data.yrange*data.xrange
					x=sum(rawpsth{i}(mini:maxi));
					if data.plotburst==1
						e=finderror(data.raw{i},err,mint,maxt+data.binwidth,data.wrapped,1);
					else
						e=finderror(data.raw{i},err,mint,maxt+data.binwidth,data.wrapped,0);
					end
					tmat(i)=x;
					emat(i)=e;
				end
				
			case 5 %We are using the peak/mean ratio
				errordlg('Not yet set up...');
				
			case 6 %We're using FFT
				%if we're using a doc file, user needs to give temp freq
				if isempty(data.tempfreq)
					tmpfrq=inputdlg('Temporal Frequency (Hz)?','Temp Freq for FFT Calculation');
					data.tempfreq=tmpfrq{1};
				end
				
				%get our options from GUI box
				if get(gh('FFTDefaults'),'Value')==0
					vals=fftoptions(data.tempfreq);
				else
					vals = [1 Inf Inf 0 data.tempfreq];
				end
				
				%call up fft finding routine and assign values
				tmp=computefft(vals(1),vals(2),sv.ErrorMode,vals(5),vals(3),vals(4));
				tmat=tmp.fftvalue;
				emat=tmp.errvalue;
				
				%store our inf/NaN points in data
				if vals(3)~=inf %if we have infinity/NaN points set for ratios
					data.fftinfnnpoints=[tmp.infpoint,tmp.nnpoint];
				end
				
				%give some extra meaning to title of plots
				if length(tmp.freq)==1 %if we've calculated single harmonics
					data.fftinfo=[' FFT Harmonic at: ',num2str(tmp.freq),' Hz'];
				else		   %if we've calculated ratios
					data.fftinfo=[' FFT Ratio: ',num2str(tmp.freq(1)),'Hz / ',num2str(tmp.freq(2)),'Hz'];
				end
				
			case 7  %We are using the tonic
				mini=find(data.time{1}==mint);
				maxi=find(data.time{1}==maxt);
				time=(maxi-mini)*data.binwidth;  %doesn't correct, same as original VS
				% 		time=((maxi+1)-mini)*data.binwidth;  %find how many msecs the bins take up
				% 		if data.numvars>1
				% 			ynum=data.yrange;
				% 		else
				% 			ynum=1;
				% 		end
				for i=1:data.yrange*data.xrange*data.zrange
					mtmp=sum(data.psth{i}(mini:maxi));
					btmp=sum(data.bpsth{i}(mini:maxi));
					if data.wrapped==1
						mtmp=mtmp/(data.numtrials*data.nummods); %we have to get the values for an individual trial
						btmp=btmp/(data.numtrials*data.nummods); %we have to get the values for an individual trial
					elseif data.wrapped==2
						mtmp=mtmp/(data.numtrials);
						btmp=btmp/(data.numtrials);
					end
					if data.plotburst==1 && mtmp>0
						e=finderror(data.raw{i},err,mint,maxt+data.binwidth,data.wrapped,1);
					elseif mtmp>0
						e=finderror(data.raw{i},err,mint,maxt+data.binwidth,data.wrapped,0);
					else
						e=0;
					end
					mtmp=(mtmp/time)*1000; %convert into spikes/second
					btmp=(btmp/time)*1000;
					e=(e/time)*1000;
					tmat(i)=mtmp-btmp;
					emat(i)=e;
				end
		end
		
		if data.plotburst==1
			data.bmatrixall=tmat;
			data.bmatrix = data.bmatrixall;
		elseif data.plotburst==0 && data.plottonic==0
			data.matrixall=tmat;
			data.matrix = data.matrixall;
		else
			data.tmatrixall=tmat;
			data.tmatrix = data.tmatrixall;
		end
		
		data.errormatall=emat;
		
		ChoosePlot;
		
		% 	if data.numvars>1
		% 		x=get(gh('XHoldMenu'),'Value');
		% 		y=get(gh('YHoldMenu'),'Value');
		% 		s1=data.matrix(x,y); s2=data.errormat(x,y); t1='SE'; t=data.matrixtitle;
		% 		s=[sprintf('%s\t',t),sprintf('%0.6g\t',s1),sprintf('%s\t',t1),sprintf('%0.6g\t',s2)];
		% 		clipboard('Copy',s);
		% 	end
		
		
		%-----------------------------------------------------------------------------------------
	case '========'
		%----------------------------------------------------------------------------------------------
		
		%just a padding line for the further analysis menu
		
		%-----------------------------------------------------------------------------------------
	case 'Difference of Gaussian'
		%-----------------------------------------------------------------------------------------
		dogfit
		dogfit('Import')
		
		%-----------------------------------------------------------------------------------------
	case 'Gabor Fit'
		%-----------------------------------------------------------------------------------------
		gaborfit
		gaborfit('Import')
		
		
		%-----------------------------------------------------------------------------------------
	case 'Gaussian Fit 1D'
		%-----------------------------------------------------------------------------------------
		helpdlg('Please run this from OPro...');
		
		%-----------------------------------------------------------------------------------------
	case 'Gaussian Fit 2D'
		%-----------------------------------------------------------------------------------------
		helpdlg('Please run this from OPro...');
		
		%-----------------------------------------------------------------------------------------
	case 'Tuning Curves'
		%-----------------------------------------------------------------------------------------
		
		switch data.numvars
			case 0
				helpdlg('You need to have a least one independent variable to get tuning curves!');
				error('Tuninig curves need more variables');
			case 1
				SpawnPlot;
			otherwise
				x=data.xvalues;
				y=data.yvalues;
				z=data.matrix;
				e=data.errormat;
				
				[a,b]=meshgrid(x,y);
				
				sv.tchandle=figure;
				set(gcf,'Tag','tcplotfig');
				figpos(1,[700 800]);
				set(gcf,'Color',[1 1 1]);
				subaxis(2,1,1,'S',0.1);
				c=[[0 0 0];[1 0 0];[0 0 .6];[0 .75 0];[0.6 0.5 0];[1 0 1];[0 0.5 0.5];[1 .5 0];[.75 0 .5];[.25 .5 .25];[.25 .25 .25];[.75 .25 0];[.25 .75 0]];
				set(gca,'ColorOrder',c);
				set(gca,'NextPlot','replacechildren');
				set(gcf, 'DefaultLineLineWidth', 1);
				errorbar(b,z,e);
				legend(num2str(data.xvalues'));
				sv.xlabelhandle=xlabel(data.ytitle);
				sv.ylabelhandle=ylabel('Firing Rate (spikes/second)');
				box on
				
				%             if data.numvars==3
				%                 t=[ data.runname ' [' data.heldvar ':' num2str(data.heldvalue) ']'];
				%                 m=get(gh('SMinEdit'),'String');
				%                 n=get(gh('SMaxEdit'),'String');
				%                 Value=get(gh('AnalysisMenu'),'Value');
				%                 String=get(gh('AnalysisMenu'),'String');
				%                 o=String{Value};
				%                 t=[ t '[' o ':' m '-' n ']'];
				%             else
				%                 m=get(gh('SMinEdit'),'String');
				%                 n=get(gh('SMaxEdit'),'String');
				%                 Value=get(gh('AnalysisMenu'),'Value');
				%                 String=get(gh('AnalysisMenu'),'String');
				%                 o=String{Value};
				%                 t=[ data.runname '[' o ':' m '-' n ']'];
				%             end
				
				MakeTitle('vector');
				sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
				set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
				
				w=rot90(z,-1);
				w=fliplr(w);
				f=rot90(e,-1);
				f=fliplr(f);
				a=rot90(a,-1);
				a=fliplr(a);
				subaxis(2,1,2,'S',0.1);
				c=[[0 0 0];[1 0 0];[0 0 .6];[0 .75 0];[0.6 0.5 0];[1 0 1];[0 0.5 0.5];[1 .5 0];[.75 0 .5];[.25 .5 .25];[.25 .25 .25];[.75 .25 0];[.25 .75 0]];
				set(gca,'ColorOrder',c);
				set(gca,'NextPlot','replacechildren');
				set(gcf, 'DefaultLineLineWidth', 1);
				errorbar(a,w,f)
				sv.xlabelhandle=xlabel(data.xtitle);
				sv.ylabelhandle=ylabel('Firing Rate (spikes/second)');
				box on
				legend(num2str(data.yvalues'));
				
				sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
				set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
				
				x=get(gh('XHoldMenu'),'Value');
				y=get(gh('YHoldMenu'),'Value');
				tune.data.xcurve=data.matrix(:,x);
				tune.data.ycurve=data.matrix(y,:);
				tune.data.xcurveerror=data.errormat(:,x);
				tune.data.ycurveerror=data.errormat(y,:);
				save([sv.historypath 'tune.mat'], 'tune');
		end

		
		%-----------------------------Bootstrap CI Measurement----------
	case 'Bootstrap curve'
		
		if data.numvars<4
			switch get(gh('SpikeMenu'),'Value');
				case 1 %all spikes
					a=data.matrix;
					w=data.xvalues;
					T='all spikes';
				case 2 %burst spikes
					a=data.matrix;
					w=data.xvalues;
					T='Burst spikes';
				case 3 %subtract burst from all to get tonic, only surfaces etc
					a=data.matrix;
					w=data.xvalues;
					T='Tonic spikes';
				otherwise
					errordlg('Spike Selection Error')
					error('spike selection error in spikeset')
			end
			aerr=data.errormat;
			
			figure;
			figpos(1,[700 700])
			
			h=areabar(w, a, aerr);
			sa = [w;a;aerr]';
			%save([sv.historypath 'tuningcurve.mat'], 'sa');
			assignin('base','tuningcurve',sa);
			%ylim([-0.1 1.1]);
			set(gca,'FontSize',12);
			t=data.matrixtitle;
			title(t);
			ylabel('Normalized Firing Rate');
			xlabel('Diameter');
			
			pval = str2num(get(gh('SErrorEdit'),'String'));
			if pval == 0 || pval > 1
				pval = 0.05;
			end
			
			for i=1:length(a)
				if data.numvars == 1
					tr = [data.sums{i}];
				elseif data.numvars > 1 && sv.xlock == 0
					tr = [data.sums{sv.yval, i, sv.zval}];
				elseif data.numvars > 1 && sv.ylock == 0
					tr = [data.sums{i, sv.xval, sv.zval}];
				end

				if data.wrapped == 1
					timet = data.modtime / 10;
				else
					timet = data.trialtime / 10;
				end
				modt = 1000 / timet;
				tr = tr .* modt; %convert to Hz

				ci = bootci(1000,{@mean, tr},'alpha',pval);
				modx = (max(w) / length(w)) / 2;
				coly = [rand rand rand];
				h = line([w(i)-modx w(i)+modx],[ci(1) ci(1)]);
				set(h,'Color',coly,'LineStyle','-.','LineWidth',1);
				h=text(w(i),ci(1)+0.01,sprintf('%.5g : %.5g',i,ci(1)));
				set(h,'Color',coly,'FontSize',10)
				
				h = line([w(i)-modx w(i)+modx],[ci(2) ci(2)]);
				set(h,'Color',coly,'LineStyle','-.','LineWidth',1);
				h=text(w(i),ci(2)+0.01,sprintf('%.5g : %.5g',i,ci(2)));
				set(h,'Color',coly,'FontSize',10);
			end
		end
		
		%-----------------------------Surround Suppression Measurement----------
	case 'Surround Suppression'
		
		if data.numvars<4
			switch get(gh('SpikeMenu'),'Value');
				case 1 %all spikes
					a=data.matrix;
					w=data.xvalues;
					T='all spikes';
				case 2 %burst spikes
					a=data.matrix;
					w=data.xvalues;
					T='Burst spikes';
				case 3 %subtract burst from all to get tonic, only surfaces etc
					a=data.matrix;
					w=data.xvalues;
					T='Tonic spikes';
				otherwise
					errordlg('Spike Selection Error')
					error('spike selection error in spikeset')
			end
			aerr=data.errormat;
			if w(1)==0
				fakezero = false;
				s=a(1);
				a=a-s;
			else
				fakezero = true;
				questdlg('No 0 diameter, please calculate manually and enter in spikes: Dogfit Spont');
				s = str2num(get(gh('SPDogSpont'),'String'));
				a = [s a];
				w = [0 w];
				aerr = [0 aerr];
			end
			
			figure;
			figpos(1,[700 700])
			
			ret = questdlg('Do you want to measure optimum manually?');
			if strcmpi(ret,'Yes')
				areabar(w, a, aerr);
				[xi,yi]=ginput(1);
				[xx1, ~] = local_nearest(xi(1),w,yi(1),a);
				i = find(w == xx1);
				m = a(i);
			else
				[m,i]=max(a);
			end
			
			%save pre-normalized values
			ao = a;
			aerro = aerr;
			
			aerr=aerr./m;
			a=a./m;
			d=w(i);
			
			h=areabar(w, a, aerr);
			sa = [w;a;aerr]';
			save([sv.historypath 'tuningcurve.mat'], 'sa');
			assignin('base','tuningcurve',sa);
			%ylim([-0.1 1.1]);
			set(gca,'FontSize',12);
			line(w(i),a(i), 'Color', [0 0 1], 'Marker', 'o', 'MarkerSize', 12);
			t=data.matrixtitle;
			title(t);
			sv.ylabelhandle=ylabel('Normalized Firing Rate');
			sv.xlabelhandle=xlabel('Diameter');
			%legend(T,0);
			[xi,yi]=ginput(2);
			
			[xx1, yy1] = local_nearest(xi(1),w,yi(1),a);
			[xx2, yy2] = local_nearest(xi(2),w,yi(2),a);
			
			xidx1 = find(data.xvalues == xx1);
			xidx2 = find(data.xvalues == xx2);
			
			if data.numvars == 1
				tr = [data.sums{xidx1}; data.sums{xidx2}];
				tr0 = data.sums{1};
			elseif data.numvars > 1 && sv.xlock == 0
				tr = [data.sums{sv.yval, xidx1, sv.zval}; data.sums{sv.yval, xidx2, sv.zval}];
				tr0 = data.sums{sv.yval, 1, sv.zval};
			elseif data.numvars > 1 && sv.ylock == 0
				tr = [data.sums{xidx1, sv.xval, sv.zval}; data.sums{xidx2, sv.xval, sv.zval}];
				tr0 = data.sums{1, sv.xval, sv.zval};
			end
			
			if data.wrapped == 1
				timet = data.modtime / 10;
			else
				timet = data.trialtime / 10;
			end
			modt = 1000 / timet;
			tr = tr .* modt; %convert to Hz
			tr0 = tr0 .* modt; %convert to Hz
			
			pval = str2num(get(gh('SErrorEdit'),'String'));
			if pval == 0 || pval > 1
				pval = 0.05;
			end
			
			ci = bootci(1000,{@mean, tr},'alpha',pval);
			ci = ci - s;%now remove spontaneous
			ci = ci ./ m;
			
			ci0 = bootci(1000,{@mean, tr0},'alpha',pval);
			ci0 = ci0 - s;%now remove spontaneous
			ci0 = ci0 ./ m;
			
			line(xx1,yy1, 'Color', [1 0 0], 'Marker', 'o', 'MarkerSize', 12);
			line(xx2,yy2, 'Color', [1 0 0], 'Marker', 'o', 'MarkerSize', 12);
			
			b = mean([yy1 yy2]); 
			bo = mean([ao(xidx1) ao(xidx2)]);
			
			h = line([w(1) w(end)],[b b]);
			set(h,'Color',[0.7 0.2 0.2],'LineStyle','-','LineWidth',2);
			if ci(1) > -1 && ci(1) < 5 
				h = line([w(1) w(end)],[ci(1) ci(1)]);
				set(h,'Color',[0.7 0.2 0.2],'LineStyle','-.','LineWidth',1);
				text(w(end)/2,ci(1)+0.01,sprintf('CI at p = %.5g : %.5g',pval,ci(1)));
			end
			if ci(2) > -1 && ci(2) < 5 
				h = line([w(1) w(end)],[ci(2) ci(2)]);
				set(h,'Color',[0.7 0.2 0.2],'LineStyle','-.','LineWidth',1);
				text(w(end)/2,ci(2)+0.01,sprintf('CI at p = %.5g : %.5g',pval,ci(2)));
			end
			
			if fakezero == false
				h = line([w(1) w(end)],[ci0(1) ci0(1)]);
				set(h,'Color',[0.6 0.6 0.6],'LineStyle',':','LineWidth',1);
				h = line([w(1) w(end)],[ci0(2) ci0(2)]);
				set(h,'Color',[0.6 0.6 0.6],'LineStyle',':','LineWidth',1);
			end
			
			b=100-b*100;
			si = ((m-bo)/m);
			
			o = [s, d, b, ci(1), ci(2), m, bo]; %spontaneous - diameter - percent suppression
			if fakezero == true
				t1=['FAKE 0 Spontaneous: ' sprintf('%0.3f',s) 'Hz'];
			else
				t1=['Spontaneous: ' sprintf('%0.3f',s) 'Hz'];
			end
			t2=['Optimal Diameter: ' sprintf('%0.3g',d) 'deg'];
			t3=['Surround Suppression: ' sprintf('%0.3f',b) sprintf('% (-%0.3g +%0.3g)',ci(1),ci(2))];
			t4=['Opt (- spont): ' sprintf('%0.3f',m) 'Hz'];
			t5=['Plateau(- spont): ' sprintf('%0.3f',bo) 'Hz | SI = ' sprintf('%0.3f',si)];
			tt={t1,t2,t3,t4,t5};
			text(0.1,-0.1,tt,'FontSize',12);
			s=[sprintf('%s\t',t),sprintf('%0.6g\t',o)];
			clipboard('Copy',s);
		end
		
		%----------------------------Half-width at half-height calculation---------------
	case 'Copy Title'
		%-------------------------------------------------------------------------
		tit=data.matrixtitle;
		tit=regexprep(tit,'\\newline','|');
		tit=regexprep(tit,'\\pm','+-');
		clipboard('copy',tit);
		
		%----------------------------Half-width at half-height calculation---------------
	case 'Plot All ISIs'
		%-------------------------------------------------------------------------
		sv.isihandle=figure;
		set(gcf,'Tag','isiplotfig');
		figpos(1,[850 750]);
		set(gcf,'Color',[1 1 1]);
		window=str2double(get(gh('SISIWindow'),'String'));
		maxm=10;
		
		if data.wrapped==1
			wrapped=1;
		else
			wrapped=0;
		end
		
		p = panel('defer');
		
		switch data.numvars
			case 0
				
			case 1
				p.pack(data.xrange,1);
				for i=1:data.xrange
					isi{i}=getisi(data.raw{i},window,0,Inf,wrapped);
					m=max(isi{i});
					if m > maxm
						maxm=m;
					end
				end
				for i=1:data.xrange
					p(i,1).select();
					[y,x]=hist(isi{i},window);
					bar(x,y,1,'k');
					axis([-inf inf 0 maxm]);
					box off
					if i < data.xrange
						set(gca,'XTick',[], 'YTick', []);
					end
				end
				t=[data.runname ' Cell:' num2str(sv.firstunit) '{ISI Plots}'];
				p.ylabel([data.xtitle ' (' num2str(data.xvalues) ')']);
				p.xlabel('Time (ms)');
				p.title(t);
				p.de.margin = 2;
				p.margin = [15 15 5 15];

			case 2
				p.pack(data.yrange, data.xrange);
				for i=1:data.yrange*data.xrange
					isi=getisi(data.raw{i},window,0,Inf,wrapped);
					subaxis(data.yrange,data.xrange,i,'S',0,'M',0.1,'P',0);
					if isi == 0
						y=zeros(1,window);
						x=(1:window);
					else
						[y,x]=hist(isi,window);
					end
					bar(x,y,'k');
					if max(y)==0
						axis([-inf inf 0 1]);
					end
				end
				t=[data.runname ' Cell:' num2str(sv.firstunit) '{ISI Plots}'];
				%[ax,h1]=suplabel([data.xtitle ' (' num2str(data.xvalues) ')'],'x');
				[ax,h2]=suplabel('Time (ms)','x');
				[ax,h3]=suplabel(t ,'t');
		end
		
		% because we 'defer'red, we have to refresh.
		p.refresh();
		
		%----------------------------Half-width at half-height calculation---------------
	case 'Half-Width'
		%-----------------------------------------------------------------------------------------
		
		HwHH('go');
		
		%--------------------Plateau Analysis for Helen calculation--------------------------------
	case 'Plateau Analysis'
		%--------------------------------------------------------------------------------------------------
		
		plateau('go');
		
		%--------------------Plateau Analysis for Helen calculation--------------------------------
	case 'Temporal Analysis'
		%--------------------------------------------------------------------------------------------------
		
		temporalanalysis();
		
		%---------------------------Run SPlot------------------------------------------------------------------
	case 'Plot Single PSTH'
		%---------------------------------------------------------------------------------------------------
		
		splot
		
		%---------------------------Latency------------------------------------------------------------------
	case 'Do Latency'
		%---------------------------------------------------------------------------------------------------
		
		if isfield(data,'bars') && ~isempty(data.bars) && data.plottype == 4
			
			baseline = sv.bars.usezero;
			
			propmax=str2double(get(gh('SErrorEdit'),'String'));
			if propmax == 0 || isempty(propmax)
				propmax = 50;
			end
			
			[time,psth,bpsth] = selectPSTH();
			barspsth = data.bars.mean';
			timebars = data.bars.time;
			
			mi = max(barspsth);
			
			[xi,yi]=ginput(1);
			[x1, y1] = local_nearest(xi(1),timebars,yi(1),barspsth);

			yi = find(barspsth == y1);
			yi = yi(1);

			barspsth = barspsth(1:yi);
			timebars = timebars(1:yi);

			t2 = linspace(timebars(1),timebars(end),200);

			barspsth = interp1(timebars,barspsth,t2);
			timebars = t2;

			if baseline == 1
				barspsth = (barspsth/max(barspsth))*100;
			else
				barspsth = barspsth - barspsth(1);
				barspsth = (barspsth/max(barspsth))*100;
			end

			ii = find(barspsth >= propmax);
			if isempty(ii);
				ii = 1;
			end
			ii = ii(1);
			latency = timebars(ii);
			data.latency = timebars(ii) - timebars(1);

			hold on
			line([latency latency],[0 mi],'Color',[0 1 0],'LineWidth',1);
			yy = ylim;
			text(latency,mi,['Latency=' num2str(data.latency) 'ms'],'FontSize',16,'FontWeight','bold','Color',[0 1 0]);
			hold off
		else
			helpdlg('Couldn''t find BARS data, please plot PSTH and turn on BARS before calculating latency');
		end
		
		
		%-----------------------------------------------------------------------------------------
	case 'Burst Ratio'
		%-----------------------------------------------------------------------------------------
		
		if data.measured~=1 || isempty(data.bmatrix)
			errordlg('You need to first measure all the spikes, then remeasure using the bursts, then tonic before using this analysis')
			error('Burst Ratio Error')
		end
		
		ratio=data.bmatrix./data.matrix;
		a=find(ratio==inf | ratio==-inf);
		ratio(a)=0;
		ratio(isnan(ratio))=0;
		figure
		if data.numvars==1
			plot(data.xvalues,data.matrix,'k-');
			hold on
			[ax,h1,h2]=plotyy(data.xvalues,data.bmatrix,data.xvalues,ratio);
			hold off
			sv.xlabelhandle=xlabel(data.xtitle);
			axes(ax(1))
			sv.ylabelhandle=ylabel('All Spikes (black) and Burst Spikes (blue)');
			axes(ax(2))
			sv.ylabelhandle=ylabel('Ratio of Burst to Total Spikes');
			sv.titlehandle=title(['Ratio Plot for:' data.matrixtitle]);
			set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
			data.ratio=ratio;
			MR=mean(data.ratio);
			assignin('base','ratios',ratio);
			save([sv.historypath 'ratio.txt'], 'ratio','-ASCII');
			s=[sprintf('%s\t',data.matrixtitle),sprintf('%0.6g\t',ratio),sprintf('%0.6g\t',MR)];
			clipboard('Copy',s);
		else
			pcolor(data.xvalues,data.yvalues,ratio);
			shading interp
			colormap(hot(256))
			caxis([0 1])
			sv.xlabelhandle=xlabel(data.xtitle);
			sv.ylabelhandle=ylabel(data.ytitle);
			sv.titlehandle=title(['Ratio Plot for:' data.matrixtitle]);
			set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
			set(gca,'Tag','');
			colorbar
			Y=get(gh('YHoldMenu'),'value');
			data.ratio=ratio;
			R=data.ratio(Y,:);
			MR=mean(R);
			assignin('base','ratios',ratio);
			save([sv.historypath 'ratio.txt'], 'ratio','-ASCII');
			s=[sprintf('%s\t',data.matrixtitle),sprintf('%0.6g\t',R),sprintf('%0.6g\t',MR)];
			clipboard('Copy',s);
		end
		
		fixfig
		RR=mean(mean(data.ratio));
		RR=['Mean Burst Ratio:     ' sprintf('%0.6g',RR)]
		gtext(RR)
		
		%-----------------------------------------------------------------------------------------
	case 'Temporal Movie'
		%-----------------------------------------------------------------------------------------
		%calls external movie creation routine
		CreateMovie;
		
		%-----------------------------------------------------------------------------------------
	case '2D Curves'
		%-----------------------------------------------------------------------------------------
		if data.numvars<2
			errordlg('Single independent variable file is Loaded - Cannot perform this analysis')
			error('Returned with Error')
		end
		if isempty(data.matrix);
			errordlg('You must first measure a portion of the PSTH to obtain a data matrix');
			error('Returned with Error');
		end
		figure;
		sv.xhold=get(gh('XHoldMenu'),'Value');
		sv.yhold=get(gh('YHoldMenu'),'Value');
		xcurve=data.matrix(sv.yhold,:);
		xcurveerror=data.errormat(sv.yhold,:);
		ycurve=data.matrix(:,sv.xhold);
		ycurveerror=data.errormat(:,sv.xhold);
		set(gcf, 'DefaultLineLineWidth', 1);
		set(gcf, 'DefaultAxesLineWidth', 1);
		x(:,1)=data.xvalues';
		x(:,2)=data.yvalues';
		y(:,1)=xcurve';
		y(:,2)=ycurve;
		e(:,1)=xcurveerror';
		e(:,2)=ycurveerror;
		hold on
		areabar(x(:,1),y(:,1),e(:,1),[.85 .80 .80],1,'Color',[1 0 0],'Marker','o','MarkerSize',6,'MarkerFaceColor',[1 0 0])
		areabar(x(:,2),y(:,2),e(:,2),[.80 .80 .85],1,'Color',[0 0 .6],'Marker','o','MarkerSize',6,'MarkerFaceColor',[0 0 .6])
		plot(x(:,1),y(:,1),'Color',[1 0 0],'Marker','o','MarkerSize',6,'MarkerFaceColor',[1 0 0]);
		plot(x(:,2),y(:,2),'Color',[0 0 .6],'Marker','o','MarkerSize',6,'MarkerFaceColor',[0 0 .6]);
		hold off
		box on
		legend('X Axis','Y Axis')
		
		%c=[[1 0 0];[0 0 1]];
		%set(gca,'ColorOrder',c);
		%set(gca,'NextPlot','replacechildren');
		%errorbar(x,y,e);
		xmax=max(xcurve);
		ymax=max(ycurve);
		x=find(xcurve==xmax);
		y=find(ycurve==ymax);
		if max(size(x))>1; x=x(1); end;  %select the first max if more than 1
		if max(size(y))>1; y=y(1); end;
		x=data.xvalues(x);
		y=data.yvalues(y);
		sv.titlehandle=title('Please measure the RED plot first, then the blue plot');
		sv.xlabelhandle=xlabel('Spatial Position in X or Y coordinates (deg)');
		sv.ylabelhandle=ylabel('Firing Rate (spikes/second)');
		axval=axis;
		line([axval(1) axval(2)],[xmax/2 xmax/2],'Color', [1 0 0],'LineStyle',':');
		line([x x],[axval(3) axval(4)],'Color', [1 0 0],'LineStyle',':');
		line([axval(1) axval(2)],[ymax/2 ymax/2],'Color', [0 0 .6],'LineStyle',':');
		line([y y],[axval(3) axval(4)],'Color', [0 0 .6],'LineStyle',':');
		[x y]=ginput(4);
		xval=x(1:2);
		yval=x(3:4);
		xvals=max(xval)-min(xval);
		yvals=max(yval)-min(yval);
		avg=(xvals+yvals)/2;
		if data.numvars==3
			t=[ data.runname ' [' data.heldvar ':' num2str(data.heldvalue) ']'];
			m=get(gh('SMinEdit'),'String');
			n=get(gh('SMaxEdit'),'String');
			Value=get(gh('AnalysisMenu'),'Value');
			String=get(gh('AnalysisMenu'),'String');
			o=String{Value};
			t=[ t '[' o ':' m '-' n ']'];
		else
			m=get(gh('SMinEdit'),'String');
			n=get(gh('SMaxEdit'),'String');
			Value=get(gh('AnalysisMenu'),'Value');
			String=get(gh('AnalysisMenu'),'String');
			o=String{Value};
			t=[ data.runname '[' o ':' m '-' n ']'];
		end
		t=[t ': X curve=' num2str(xvals) '   Y curve=' num2str(yvals) ' (mean=' num2str(avg) ')'];
		sv.titlehandle=title(t);
		set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
		
		
		%-----------------------------------------------------------------------------------------
	case 'Plot All Spikes'
		%-----------------------------------------------------------------------------------------
		
		data.areaplot=0;
		automeasure=0;
		data.plotburst=0;
		data.plottonic=0;
		set(gh('LoadText'),'String','Plot All Spikes ON');
		set(gca,'Tag','SpikeFigMainAxes');
		sv.AnalysisMethod=get(gh('AnalysisMenu'),'Value') ;
		
		%-----------------------------------------------------------------------------------------
	case 'Area Analysis'
		%-----------------------------------------------------------------------------------------
		x=str2double(get(gh('SErrorEdit'),'String'));
		if data.numvars<2
			errordlg('Single independent variable file is Loaded - Cannot perform this analysis')
			error('Error: Need X and Y variable data.')
		end
		if data.measured==0 && data.textload==0
			errordlg('Sorry, you need to measure the PSTH first before you can perform an area analysis...')
			error('Error: Please measure data before area analysis.')
		end
		if ~isfield(data,'spontaneous') && x==0
			errordlg('You need to first measure a spontaneous point in the data using "Plot Single PSTH" and select the correct data point');
			error('Error: Please measure spontaneous before area analysis.')
		end
		data.areaplot=1;
		set(gh('SmoothingMenu'),'Value',4);
		if get(gh('SmoothingSlider'),'Value') < 5
			set(gh('SmoothingSlider'),'Value',5);
			sv.SmoothValue=5;
		else
			sv.SmoothValue = floor(get(gh('SmoothingSlider'),'Value'));
		end
		sv.SmoothType='linear';
		set(findobj('Tag','SmoothingText'),'String',['Resolution: ' num2str(sv.SmoothValue)]);
		set(gh('STypeMenu'),'Value',3);
		set(gh('CMapMenu'),'Value',5);
		set(gh('ShadingMenu'),'Value',3);
		sv.PlotType='CheckerBoard';
		sv.ShadingType='faceted';
		sv.CMap='gray';
		set(gh('ColorEdit'),'String','0');
		Value=get(gh('ErrorMenu'),'Value');
		String=get(gh('ErrorMenu'),'String');
		sv.ErrorMode=String{Value};
		data.anal.errormode=sv.ErrorMode;
		
		if isempty(x) || x > 0
			data.anal.error=x;
		else
			button=questdlg(['Do you want to use Mean+2*SD (' num2str(data.spontaneous.limitt) '), Mean+2*SE (' num2str(data.spontaneous.limitset) ') or 0.01 confidence interval of a poisson (' num2str(data.spontaneous.poissont) ')?'],'Area Analysis','2*SD','2*SE','Poisson','2*SD');
			switch button
				case '2*SD'
					data.anal.error=data.spontaneous.limitt;
				case '2*SE'
					data.anal.error=data.spontaneous.limitset;
				case 'Poisson'
					data.anal.error=data.spontaneous.poissont;
				case 'Cancel'
					error('Area analysis cancelled');
			end
		end
		PlotDMatrix(data.matrix);
		caxis([0 1])
		x=data.anal.xvals(2)-data.anal.xvals(1);
		y=data.anal.yvals(2)-data.anal.yvals(1);
		area=x*y;
		a=find(data.anal.area>0);
		data.anal.size=area*size(a,1);
		x=axis;
		g=text(x(1)-(x(1)/25),x(3)-(x(3)/25),num2str(data.anal.size));
		
		set(g,'Color',[1 0 0],'Fontsize',14,'Fontweight','bold');
		
		%-----------------------------------------------------------------
		s1=data.anal.size;
		v=get(gh('ErrorMenu'),'Value');
		t1=String{v};
		s2=data.anal.error; t=data.matrixtitle;
		s=[sprintf('%s\t',t),sprintf('%0.6g\t',s1),sprintf('%s\t',t1),sprintf('%0.6g\t',s2)];
		clipboard('Copy',s);
		
		%-----------------------------------------------------------------------------------------
	case 'Spawn'
		%-----------------------------------------------------------------------------------------
		
		SpawnPlot(gca);
		
		%-----------------------------------------------------------------------------------------
	case 'Load MAT'
		%-----------------------------------------------------------------------------------------
		startclock=clock;
		startcpu=cputime;
		
		oldpath=pwd;
		if isfield(sv,'matsavepath') && ~isnumeric(sv.matsavepath)
			cd(sv.matsavepath);
		elseif isfield(sv,'matloadpath') && ~isnumeric(sv.matloadpath)
			cd(sv.matloadpath);
		end
		if ~strcmp(sv.auto,'report')
			[fn,pn]=uigetfile('*.mat','Load Processed Matrix');
			if isequal(fn,0)||isequal(pn,0), errordlg('Sorry, no file selected'),error('File is empty'); end
		else
			pn=sv.pn;
			fn=sv.fn;
		end
		clear global data
		sv.matloadpath=pn;
		cd(pn);
		load(fn);
		cd(oldpath);
		
		set(gh('SBinWidth'),'String',num2str(data.binwidth));
		sv.BinWidth=data.binwidth;
		set(gh('WrappedMenu'),'Value',data.wrapped);
		sv.Wrapped=data.wrapped;
		set(gh('CellMenu'),'Value',data.cell);
		sv.firstunit=data.cell;
		
		switch data.numvars
			case 0
				set(gh('HoldXText'),'String',' ');
				set(gh('XHoldMenu'),'Value',1);
				set(gh('XHoldMenu'),'String',' ');
				set(gh('XHoldMenu'),'Enable','off');
				set(gh('XHoldCheck'),'Enable','off');
				set(gh('HoldYText'),'String',' ');
				set(gh('YHoldMenu'),'Value',1);
				set(gh('YHoldMenu'),'String',' ');
				set(gh('YHoldMenu'),'Enable','off');
				set(gh('YHoldCheck'),'Enable','off');
				set(gh('HoldZText'),'String',' ');
				set(gh('ZHoldMenu'),'Value',1);
				set(gh('ZHoldMenu'),'String',' ');
				set(gh('ZHoldMenu'),'Enable','off');
				set(gh('ZHoldCheck'),'Enable','off');
				
				%%%Disenables the 3D plotting options menus
				set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Point'});
				if get(gh('SPlotMenu'),'Value')>3; set(gh('SPlotMenu'),'Value',2+2); end
				set(gh('STypeMenu'),'Enable','off');
				set(gh('CMapMenu'),'Enable','off');
				set(gh('ShadingMenu'),'Enable','off');
				set(gh('LightMenu'),'Enable','off');
				set(gh('LightingMenu'),'Enable','off');
				set(gh('RotateButton'),'Enable','off');
				set(gh('CMapButton'),'Enable','off');
				set(gh('LabelButton'),'Enable','off');
				set(gh('ColorEdit'),'Enable','off');
				set(gh('CheckBox1'),'Enable','off');
				set(gh('SmoothingMenu'),'Enable','off');
				
				sv.xval=1;
				sv.yval=1;
				sv.zval=1;
				set(gh('XHoldCheck'),'Value',0);
				set(gh('YHoldCheck'),'Value',0);
				set(gh('ZHoldCheck'),'Value',0);
				sv.xlock=0;
				sv.ylock=0;
				sv.zlock=0;
				data.xtitle='';
				data.xvalues=[];
				data.xrange=1;
				data.ytitle='';
				data.yvalues=[];
				data.yrange=1;
				data.ztitle='';
				data.zvalues=[];
				data.zrange=1;
				
				set(gh('SXSlice'),'String',' ');
				set(gh('SYSlice'),'String',' ');
				
			case 1
				%%%Change Hold X & Hold Y pull down menu labels to something meaningful
				set(gh('HoldXText'),'String','Held X Value');
				set(gh('XHoldMenu'),'Value',1);
				set(gh('XHoldMenu'),'String',' ');
				set(gh('XHoldMenu'),'Enable','on');
				set(gh('XHoldCheck'),'Enable','on');
				set(gh('HoldYText'),'String','');
				set(gh('YHoldMenu'),'Value',1);
				set(gh('YHoldMenu'),'String',' ');
				set(gh('YHoldMenu'),'Enable','off');
				set(gh('YHoldCheck'),'Enable','off');
				set(gh('HoldZText'),'String','');
				set(gh('ZHoldMenu'),'Value',1);
				set(gh('ZHoldMenu'),'String',' ');
				set(gh('ZHoldMenu'),'Enable','off');
				set(gh('ZHoldCheck'),'Enable','off');
				
				%%%Set the plotting options
				if get(gh('SPlotMenu'),'Value')>6; set(gh('SPlotMenu'),'Value',6); end
				set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Curve'});
				set(gh('STypeMenu'),'Enable','off');
				set(gh('CMapMenu'),'Enable','off');
				set(gh('ShadingMenu'),'Enable','off');
				set(gh('LightMenu'),'Enable','off');
				set(gh('LightingMenu'),'Enable','off');
				set(gh('RotateButton'),'Enable','off');
				set(gh('CMapButton'),'Enable','off');
				set(gh('LabelButton'),'Enable','off');
				set(gh('ColorEdit'),'Enable','off');
				set(gh('CheckBox1'),'Enable','off');
				set(gh('SmoothingMenu'),'String',{'none';'interpolated';'polynomial';'smoothed'});
				set(gh('SmoothingMenu'),'Value',1);
				set(gh('CheckBox1'),'Enable','on');
				
				set(gh('XHoldMenu'),'String',{num2str(data.xvalues')});
				set(gh('XHoldMenu'),'Value',ceil(data.xrange/2));
				sv.xval=get(gh('XHoldMenu'),'Value');
				sv.yval=1;
				sv.zval=1;
				set(gh('YHoldCheck'),'Value',0);
				set(gh('ZHoldCheck'),'Value',0);
				sv.ylock=0;
				sv.zlock=0;
				data.ytitle='';
				data.yvalues=[];
				data.yrange=1;
				data.ztitle='';
				data.zvalues=[];
				data.zrange=1;
				
				set(gh('SXSlice'),'String',num2str(data.xvalues));
				set(gh('SYSlice'),'String',' ');
				
			case 2
				set(gh('HoldXText'),'String','Hold X Value');
				set(gh('XHoldMenu'),'Value',1);
				set(gh('XHoldMenu'),'String',' ');
				set(gh('XHoldMenu'),'Enable','on');
				set(gh('XHoldCheck'),'Enable','on');
				set(gh('HoldYText'),'String','Hold Y Value');
				set(gh('YHoldMenu'),'Value',1);
				set(gh('YHoldMenu'),'String',' ')
				set(gh('YHoldMenu'),'Enable','on');
				set(gh('YHoldCheck'),'Enable','on');
				set(gh('HoldZText'),'String','Hold Z Value');
				set(gh('ZHoldMenu'),'Value',1);
				set(gh('ZHoldMenu'),'String',' ');
				set(gh('ZHoldMenu'),'Enable','on');
				set(gh('ZHoldCheck'),'Enable','on');
				
				%%%Set the plotting options
				set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Curve';'Surface'});
				set(gh('SPlotMenu'),'Value',4+2);
				set(gh('STypeMenu'),'Enable','on');
				set(gh('CMapMenu'),'Enable','on');
				set(gh('ShadingMenu'),'Enable','on');
				set(gh('LightMenu'),'Enable','on');
				set(gh('LightingMenu'),'Enable','on');
				set(gh('RotateButton'),'Enable','on');
				set(gh('CMapButton'),'Enable','on');
				set(gh('LabelButton'),'Enable','on');
				set(gh('ColorEdit'),'Enable','on');
				set(gh('CheckBox1'),'Enable','on');
				set(gh('SmoothingMenu'),'String',{'none';'cubic';'spline';'linear';'nearest'});
				set(gh('SmoothingMenu'),'Value',1);
				set(gh('CheckBox1'),'Enable','on');
				
				set(gh('XHoldMenu'),'String',{num2str(data.xvalues')});
				set(gh('XHoldMenu'),'Value',ceil(data.xrange/2));
				set(gh('YHoldMenu'),'String',{num2str(data.yvalues')});
				set(gh('YHoldMenu'),'Value',ceil(data.yrange/2));
				sv.xval=get(gh('XHoldMenu'),'Value');
				sv.yval=get(gh('YHoldMenu'),'Value');
				sv.zval=1;
				set(gh('ZHoldCheck'),'Value',0);
				sv.zlock=0;
				data.ztitle='';
				data.zvalues=[];
				data.zrange=1;
				
				set(gh('SXSlice'),'String',num2str(data.xvalues));
				set(gh('SYSlice'),'String',num2str(data.yvalues));
				
			case 3
				set(gh('HoldXText'),'String','Hold X Value');
				set(gh('XHoldMenu'),'Value',1);
				set(gh('XHoldMenu'),'String',' ');
				set(gh('XHoldMenu'),'Enable','on');
				set(gh('XHoldCheck'),'Enable','on');
				set(gh('HoldYText'),'String','Hold Y Value');
				set(gh('YHoldMenu'),'Value',1);
				set(gh('YHoldMenu'),'String',' ')
				set(gh('YHoldMenu'),'Enable','on');
				set(gh('YHoldCheck'),'Enable','on');
				set(gh('HoldZText'),'String','Hold Z Value');
				set(gh('ZHoldMenu'),'Value',1);
				set(gh('ZHoldMenu'),'String',' ');
				set(gh('ZHoldMenu'),'Enable','on');
				set(gh('ZHoldCheck'),'Enable','on');
				
				%%%Set the plotting options
				set(gh('SPlotMenu'),'String',{'ISI';'Intervalogram';'Raster';'PSTH';'Fanogram';'Curve';'Surface'});
				set(gh('SPlotMenu'),'Value',4+2);
				set(gh('STypeMenu'),'Enable','on');
				set(gh('CMapMenu'),'Enable','on');
				set(gh('ShadingMenu'),'Enable','on');
				set(gh('LightMenu'),'Enable','on');
				set(gh('LightingMenu'),'Enable','on');
				set(gh('RotateButton'),'Enable','on');
				set(gh('CMapButton'),'Enable','on');
				set(gh('LabelButton'),'Enable','on');
				set(gh('ColorEdit'),'Enable','on');
				set(gh('CheckBox1'),'Enable','on');
				set(gh('SmoothingMenu'),'String',{'none';'cubic';'spline';'linear';'nearest'});
				set(gh('SmoothingMenu'),'Value',1);
				set(gh('CheckBox1'),'Enable','on');
				
				set(gh('XHoldMenu'),'String',{num2str(data.xvalues')});
				set(gh('XHoldMenu'),'Value',ceil(data.xrange/2));
				set(gh('YHoldMenu'),'String',{num2str(data.yvalues')});
				set(gh('YHoldMenu'),'Value',ceil(data.yrange/2));
				set(gh('ZHoldMenu'),'String',{num2str(data.zvalues')});
				set(gh('ZHoldMenu'),'Value',ceil(data.zrange/2));
				sv.xval=get(gh('XHoldMenu'),'Value');
				sv.yval=get(gh('YHoldMenu'),'Value');
				sv.zval=get(gh('ZHoldMenu'),'Value');
				
				if ~isfield(data,'zvalues');
					data.ztitle='';
					data.zvalues=[];
					data.zrange=1;
				end
				
				set(gh('SXSlice'),'String',num2str(data.xvalues));
				set(gh('SYSlice'),'String',num2str(data.yvalues));
		end
		
		if isfield(data,'sv') %better if we can use old values
			set(gh('SStartMod'),'String',num2str(data.sv.StartMod));
			set(gh('SStartTrial'),'String',num2str(data.sv.StartTrial));
			set(gh('SEndMod'),'String',num2str(data.sv.EndMod));
			set(gh('SEndTrial'),'String',num2str(data.sv.EndTrial));
			sv.StartMod=data.sv.StartMod;
			sv.StartTrial=data.sv.StartTrial;
			sv.EndMod=data.sv.EndMod;
			sv.EndTrial=data.sv.EndTrial;
			if isfield(data.sv,'mint')
				set(gh('SMinEdit'),'String',num2str(data.sv.mint));
				set(gh('SMaxEdit'),'String',num2str(data.sv.maxt));
			end
		elseif ~strcmp(sv.auto,'report')
			sv.EndTrial=data.numtrials;
			sv.EndMod=data.nummods;
			set(gh('SEndMod'),'String',num2str(sv.EndMod));
			set(gh('SEndTrial'),'String',num2str(sv.EndTrial));
		end
		
		
		if ~isfield(data,'plottonic')
			data.plottonic=0;
		end
		if ~isfield(data,'xvalueso')
			data.xvalueso=data.xvalues;
		end
		if ~isfield(data,'yvalueso')
			data.yvalueso=data.yvalues;
		end
		if ~isfield(data,'zvalueso')
			data.zvalueso=data.zvalues;
		end
		if ~isfield(data,'runname')
			data.filename(data.filename=='\')='/';	%stops annoying TeX interpertation errors
			t=find(data.filename=='/');
			data.runname=data.filename((t(end-2))+1:t(end));
		end
		
		set(gh('LoadText'),'String','Plot All Spikes ON');
		set(gh('AnalMenu'),'Value',1);
		
		set(gh('SMinEdit'),'UserData','yes');
		set(gh('SMaxEdit'),'UserData','yes');
		mint=str2double(get(gh('SMinEdit'),'String'));
		maxt=str2double(get(gh('SMaxEdit'),'String'));
		if isempty(mint) || str2double(mint)<min(data.time{1})
			mint=min(data.time{1});
			set(gh('SMinEdit'),'String',num2str(min(data.time{1})));
		end
		if isempty(maxt) || str2double(maxt)>max(data.time{1})
			maxt=max(data.time{1});
			set(gh('SMaxEdit'),'String',num2str(max(data.time{1})));
		end
		set(gca,'Tag','SpikeFigMainAxes');
		spikes('Measure');
		sv.loaded='yes';
		sv.reload='no';
		
		if isfield(data,'info') && ~strcmp(sv.auto,'report')
			spikes('Data Info');
			if isfield(data,'comments')
				set(gh('DIComments'),'String',data.comments);
			end
		end
		if ~strcmp(sv.auto,'report')
			endclock=etime(clock,startclock);
			endcpu=cputime-startcpu;
			set(sv.uihandle,'Name', [sv.title ' | Loading matrix took: ' num2str(endclock) 'secs / CPU time:' num2str(endcpu) 'secs']);
			time=[];
		end
		
		%-----------------------------------------------------------------------------------------
	case 'Save MAT'
		%-----------------------------------------------------------------------------------------
		oldpath=pwd;
		%data.matrix=0;  %just so the user has to remeasure the data to get a matrix
		if sv.autosave == true
			cd(sv.dataloadpath)
			sv.matsavepath = sv.dataloadpath;
			data.sv=sv;
			fname = regexprep(data.runname,'\s\|\s','');
			fname = [fname '_' data.meta.protocol ' Cell=' num2str(data.cell) ' Wrap=' num2str(data.wrapped) ' T=' num2str(sv.StartTrial) '-' num2str(sv.EndTrial)];
			fname = regexprep(fname,'(>|\|)','}');
			fprintf('Saving to path: %s with name: %s\n',sv.dataloadpath,fname);
			save(fname,'data');
		else
			if isfield(sv,'matsavepath') && ~isnumeric(sv.matsavepath) && exist(sv.matsavepath)
				cd(sv.matsavepath);
			elseif isfield(sv,'matloadpath') && ~isnumeric(sv.matloadpath) && exist(sv.matloadpath)
				cd(sv.matloadpath);
			else
				cd(sv.dataloadpath)
			end
			if ~isempty(data);
				fname = regexprep(data.runname,'\s\|\s','');
				fname = [fname '_' data.meta.protocol ' Cell=' num2str(data.cell) ' Wrap=' num2str(data.wrapped) ' T=' num2str(sv.StartTrial) '-' num2str(sv.EndTrial)];
				fname = regexprep(fname,'(>|\|)','_');
				[fn,pn]=uiputfile('*.mat','Save the Processed Matrix',fname);
				data.sv=sv;
				sv.matsavepath=pn;
				if isequal(fn,0)||isequal(pn,0); helpdlg('Sorry, no file selected'); return; end
				cd(pn);
				save(fn,'data');
				cd(oldpath);
			else
				warndlg('No Data has been Processed...');
			end
		end
		
		%-----------------------------------------------------------------------------------------
	case 'Save WK1'
		%-----------------------------------------------------------------------------------------
		
		if ~isempty(data);
			[fn,pn]=uiputfile('*.csv','Save the Current Surface Numerically as .CSV ');
			if isequal(fn,0)||isequal(pn,0);errordlg('Sorry, no file selected');error('No file selected');end
			if data.plottype == 4 %PSTH needed
				mytitle=regexprep(data.matrixtitle,'\\newline',' ');
				mytitle=regexprep(mytitle,'\\pm','+-');
				dlmwrite([pn,fn],mytitle,'delimiter','');
				myout=[data.time{sv.yval,sv.xval,sv.zval}',data.psth{sv.yval,sv.xval,sv.zval}'];
				dlmwrite([pn,fn],myout,'delimiter',',','-append');
			else
				dlmwrite([pn,fn],data.matrix,'delimiter',',');
				dlmwrite([pn,fn],data.errormat,'delimiter',',','-append','roffset', 1);
			end
		else
			errordlg('No Data has been Plotted Yet...');
		end
		
		%-----------------------------------------------------------------------------------------
	case 'Data Info'
		%-----------------------------------------------------------------------------------------
		
		if strcmpi(sv.loaded,'yes')
			if ~isempty(gh('DataInfoBox'))
				%close(gh('DataInfoBox'));
			else
				sv.infoboxhandle=datainfobox;
			end
		
			if strcmp(data.filetype,'txt') || strcmp(data.filetype,'smr') || strcmp(data.filetype,'plx')
				pos=get(gh('SpikeFig'),'Position');
				pos2=get(gh('DataInfoBox'),'Position');
				x=pos(1)+pos(3)+2;
				y=pos(2);
				set(gh('DataInfoBox'),'Position',[x y pos2(3) pos(4)]);
				if ~isempty(data.error)
					errorc=cell(1);
					for i=1:length(data.error)
						a=1;
						if ~isempty(data.error{i})
							if a==1
								errorc=data.error{i};
							else
								errorc=cat(1,errorc,data.error{i});
							end;
							a=a+1;
						end
					end
					out=cat(1,errorc,data.info);
				else
					out=data.info;
				end
				set(gh('DITextDisplay'),'String',out,'FontSize',14);
				figure(gh('DataInfoBox'));
				figure(gh('SpikeFig'));
			end
		end
		
		%-----------------------------------------------------------------------------------------
	case 'Save for MetaAnal'
		%-----------------------------------------------------------------------------------------
		if ~isempty(data);
			pp=str2num(get(gh('SErrorEdit'),'String'))
			if pp <= 0
				error('Please enter a firing rate for centre alone!!!')
			end

			x = data.xvalues';
			xr = data.xrange;
			y = data.matrix';
			e = data.errormat';

			acell.header = data.matrixtitle;
			acell.type = 'Percentage Plot';
			acell.data = zeros(xr, 6);
			acell.data(:,1) = 1:xr;
			acell.data(:,2) = x;
			acell.data(:,3) = y;
			acell.data(:,4) = e;
			acell.data(:,5) = (y / pp) * 100;
			acell.data(:,6) = pp;

			oldpath=pwd;

			fname = regexprep(data.runname,'\s\|\s','');
			fname = [fname '_' data.meta.protocol ' Cell=' num2str(data.cell) ' Wrap=' num2str(data.wrapped) ' T=' num2str(sv.StartTrial) '-' num2str(sv.EndTrial)];
			fname = regexprep(fname,'(>|\|)','_');
			[fn,pn]=uiputfile('*.mat','Save the Processed Matrix',fname);
			if isequal(fn,0)||isequal(pn,0); helpdlg('Sorry, no file selected'); return; end
			cd(pn);
			save(fn,'acell');
			cd(oldpath);
		else
			warndlg('No Data has been Processed...');
		end
		
		%-----------------------------------------------------------------------------------------
	case 'Polar Diagonals'
		%-----------------------------------------------------------------------------------------
		polardiagonal;
		
		%-----------------------------------------------------------------------------------------
	case 'Metric Space'
		%-----------------------------------------------------------------------------------------
		data.metricspace=metricspace(data,sv,0);
		
		%-----------------------------------------------------------------------------------------
	case 'Metric Space (Interval)'
		%-----------------------------------------------------------------------------------------
		data.metricspace=metricspace(data,sv,1);
		
		%-----------------------------------------------------------------------------------------
	case 'Binless'
		%-----------------------------------------------------------------------------------------
		
		binlessspikes(data,sv)
		
		%-----------------------------------------------------------------------------------------
	case 'Direct Method'
		%-----------------------------------------------------------------------------------------
		
		directspikes(data,sv)
		
		%-----------------------------------------------------------------------------------------
	case 'Plot PSTH'
		%-----------------------------------------------------------------------------------------
		
		PlotPSTH;
		
		%-----------------------------------------------------------------------------------------
	case 'Plot All PSTHs'
		%-----------------------------------------------------------------------------------------
		
		PlotAllPSTHs;
		
		%-----------------------------------------------------------------------------------------
	case 'Plot All'
		%-----------------------------------------------------------------------------------------
		
		PlotAll;
		
		%-----------------------------------------------------------------------------------------
	case 'BARS'
		%-----------------------------------------------------------------------------------------
% 		try
% 			data.bars = [];
% 			data.bars.latency = [];
% 			x=get(gh('SPXBox'),'Value');
% 			y=get(gh('SPYBox'),'Value');
% 			z=sv.zval;
% 			
% 			[time,psth,bpsth,tpsth]=selectPSTH(x,y,z);
% 
% 			datatype=get(gh('DataBox'),'Value');
% 			if datatype == 2
% 				psth = bpsth;
% 			elseif datatype == 3
% 				psth = tpsth;
% 			end
% 
% 			m=max(psth);
% 			[m,trials]=converttotime(m);
% 
% 			if max(psth)>0;psth=(psth/max(psth))*m;end
% 			
% 			psth(psth < 1) = 0;
% 
% 			bp = defaultParams;
% 
% 			v=get(gh('SPBARSpriorid'),'Value');
% 			s=get(gh('SPBARSpriorid'),'String');
% 			bp.prior_id = s{v};
% 			bp.dparams=str2num(get(gh('SPBARSdparams'),'String'));
% 			bp.burn_iter=str2num(get(gh('SPBARSburniter'),'String'));
% 			bp.conf_level=str2num(get(gh('SPBARSconflevel'),'String'));
% 			
% 			spdata.bars = barsP(psth,[time(1) time(end)],trials,bp);
% 			spdata.bars.psth = psth;
% 			spdata.bars.time = time;
% 			
% 			t1=spdata.bars.time(1);
% 			t2=spdata.bars.time(end);
% 			
% 			spdata.bars.time_fine = linspace(t1,t2,length(spdata.bars.mean_fine));
% 
% 			spdata.bars.x = x;
% 			spdata.bars.bp = bp;
% 			set(gh('SPPanel'),'Title',oldtext);
% 		catch ME
% 			spdata.bars = [];
% 			set(gh('SPPanel'),'Title',oldtext);
% 			rethrow(ME)
% 		end
		
		%-----------------------------------------------------------------------------------------
	case 'Plot Fano'
		%-----------------------------------------------------------------------------------------
		
		fp = fanoPlotter;
		fp.convertSpikesFormat(data,sv);
		try
			fp.matchReps = 10;
			fp.compute;
			fp.plot;
			fp.movie;
		catch
			fprintf('\nPlot Fano mean matching failed! Falling back to non-mean matched fano plot...\n');
			try
				fp.matchReps = 0;
				fp.compute;
				fp.plot;
				fp.movie;
			catch ME
				fprintf('\nNon-mean matched fano plot failed too...\n');
				ple(ME)
			end
		end
		
		
		%-----------------------------------------------------------------------------------------
	case 'Plot Burst'
		%-----------------------------------------------------------------------------------------
		data.plotburst=1;
		data.plottonic=0;
		set(gh('LoadText'),'String','Burst Analysis ON');
		
		%-----------------------------------------------------------------------------------------
	case 'Plot Tonic'
		%-----------------------------------------------------------------------------------------
		
		data.plottonic=1;
		data.plotburst=0;
		set(gh('LoadText'),'String','TONIC Analysis ON');
		
		%-----------------------------------------------------------------------------------------
	case 'PlotMatrix'
		%-----------------------------------------------------------------------------------------
		PlotDMatrix;
		
		%-----------------------------------------------------------------------------------------
	case 'RePlot'
		%-----------------------------------------------------------------------------------------
		data.areaplot=0;
		ChoosePlot;
		
		%-----------------------------------------------------------------------------------------
	case 'SaccadeTimes'
		%-----------------------------------------------------------------------------------------
		if strcmpi(data.filetype,'plx') && isa(data.pR,'plxReader')
			eA = data.pR.eA;
			rtLimits = eA.rtLimits;
			if isempty(eA.vars)
				error('No eye variable data present!')
			end
			mint = sv.mint;
			maxt = sv.maxt;
			
			g = getDensity;
			g.normaliseScatter = true;
			g.legendtxt = {'Spikes', 'SaccadeTimes'};
			
			for i = 1:length(eA.vars)
				raw = data.raw{i};
				eyeraw = eA.vars(data.tr(i));
				eyeraw.raw = raw;
				
				[~,x] = finderror(raw,'SE',mint,maxt,data.wrapped,0);
				eyeraw.spikes = x;
				y = eyeraw.sT';
				
				if ~isempty(rtLimits)
					idx = find(y > rtLimits(1) & y < rtLimits(2));
					y = y(idx);
					x = x(idx);
				end
				
				y = y(1:length(x));
				name = [raw.name(1:6) '_Eyevar_' eyeraw.name]; 
				name = regexprep(name,'\#','');
				name = regexprep(name,'\|','');
				name = regexprep(name,' ','_');
				g.columnlabels = {name};
				g.x = x;
				g.y = y;
				run(g);
				eyeraw.x=x;
				eyeraw.y=y;
				eyeraw.rtLimits = rtLimits;
				assignin('base',['eyeraw' num2str(i)], eyeraw);
			end
			
		end
		%------------------------------------------Load Text---------------------------------
	case 'Load Text'
		%-----------------------------------------------------------------------------------------
		
		set(gh('LoadText'),'String','Text Load - Remember, you cannot ''reanalyse''.');
		if exist([sv.historypath 'data.mat'],'file');delete([sv.historypath 'data.mat']); end;
		if ~exist([sv.matlabroot,'\user\various\cheat.mat'],'file')
			errordlg('You need to put "Cheat.mat" in the "user\various" directory, or else this function will not work')
			set(gh('LoadText'),'String','Text Load Cludge! Failed');
			error('Text Load Cludge Failed!')
		end
		load([sv.matlabroot,'\user\various\cheat.mat'])
		dos('"C:\Program Files\Frogbit\frogbitrun.exe" "C:\Program Files\Frogbit\tstrip.FB"')
		cd('c:\');   %where frogbit saves the temporary info file
		if ~exist('ttemp','file');errordlg('Sorry can''t find the Processed text file: Error 20');error('no ttemp file1'); end;
		[header,var]=hdload('ttemp');  % Loads the frogbit data file
		data.matrix=var(2:end,2:end);  %text files have 1st column/row as variable tags
		data.filename=header;
		data.plotburst=0;
		data.plottonic=0;
		data.textload=1;
		data.areaplot=0;
		data.xvalues=var(1,2:end);	 %here are the tags
		a=find(data.xvalues < 0.001 && data.xvalues>-0.001);
		data.xvalues(a)=0;
		data.yvalues=var(2:end,1)';
		a=find(data.yvalues < 0.001 && data.yvalues>-0.001);
		data.yvalues(a)=0;
		data.xrange=length(data.xvalues);
		data.yrange=length(data.yvalues);
		cla reset
		sv.titlehandle=title('Click "Replot" to see text matrix data');
		%---------------------------------------------------------------
		
		%-----------------------------------------------------------------------------------------
	case 'Exit'
		%-----------------------------------------------------------------------------------------
		try
			paths.init='';
			if isfield(sv,'matsavepath')
				paths.matsavepath=sv.matsavepath;
			end
			if isfield(sv,'matloadpath')
				paths.matloadpath=sv.matloadpath;
			end
			if isfield(sv,'dataloadpath')
				paths.dataloadpath=sv.dataloadpath;
			end
			if ~isempty(gh('DataInfoBox'))
				close(gh('DataInfoBox'));
			end
			history=get(gh('spikehistory'),'String');
			shistory=get(gh('SSliceHistory'),'String');
			save([sv.historypath 'shistory.mat'],'shistory');
			hsize=20;
			if size(history,1)>1
				if size(history,1)>hsize
					history=history(1:hsize); %prunes the history list
				elseif strcmp(history(end),' ')
					history=history(1:end-1); %removes dummy space
				end
				save([sv.historypath 'history.mat'],'history','paths');
			end
			if exist([sv.historypath 'spiketemp'],'file');delete([sv.historypath 'spiketemp']); end;
			if exist([sv.historypath 'data.mat'],'file');delete([sv.historypath 'data.mat']); end;
			clear data sv;
			clear history shistory paths;
			delete(gcf);
		catch
			clear data sv;
			clear history shistory paths;
			delete(gcf);
			error('Couldn''t close down cleanly, history files not saved')
		end
		
		%-----------------------------------------------------------------------------------------
end  %end of spikes main program switch

%#############################################################################
%============================End of Spikes Function===========================
%#############################################################################

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% This does all the stock 3D plotting stuff.
%
function PlotDMatrix(zdata)

global data sv;

if nargin==0
	zdata=data.matrix;
end

[a,b]=view;


if strcmp (get(gcf,'Tag'),'SpikeFig') %stops errors coming from mmpolar plots
	set(gca,'NextPlot','replacechildren');
	set(gcf,'NextPlot','add');
end

if regexpi(sv.PlotType,'(Normal|Polar)') %stops errors coming from curve > surface plots
	Value=get(gh('STypeMenu'),'Value');
	String=get(gh('STypeMenu'),'String');
	sv.PlotType=String{Value};
end

if strcmp(sv.PlotType,'Raw Data') %make sure we don't smooth raw data
	sv.SmoothType='none';
end

if sv.PropAxis==0 || strcmp(sv.PlotType,'Raw Data') %use non proportional scale
	x=1:length(data.xvalues);
	y=1:length(data.yvalues);
else
	x=data.xvalues;
	y=data.yvalues;
end

xlinear=x;
ylinear=y;

switch(sv.SmoothType)
	case 'none'
		xx=x;
		yy=y;
		data.anal.xvals=xx;
		data.anal.yvals=yy;
		dd=zdata;
		if strcmp(sv.PlotType,'Rectangle Plot');	ee=data.errormat; end
	case 'cubic'
		xx=linspace(min(x),max(x),(length(x)*sv.SmoothValue));
		yy=linspace(min(y),max(y),(length(y)*sv.SmoothValue));
		data.anal.xvals=xx;
		data.anal.yvals=yy;
		[xx,yy]=meshgrid(xx,yy);
		[x,y]=meshgrid(x,y);
		dd=interp2(x,y,zdata,xx,yy,'cubic');
	case 'linear'
		xx=linspace(min(data.xvalues),max(data.xvalues),(data.xrange*sv.SmoothValue));
		yy=linspace(min(data.yvalues),max(data.yvalues),(data.yrange*sv.SmoothValue));
		data.anal.xvals=xx;
		data.anal.yvals=yy;
		[xx,yy]=meshgrid(xx,yy);
		[x,y]=meshgrid(data.xvalues,data.yvalues);
		dd=interp2(x,y,zdata,xx,yy,'linear');
	case 'nearest'
		xx=linspace(min(data.xvalues),max(data.xvalues),(data.xrange*sv.SmoothValue));
		yy=linspace(min(data.yvalues),max(data.yvalues),(data.yrange*sv.SmoothValue));
		data.anal.xvals=xx;
		data.anal.yvals=yy;
		[xx,yy]=meshgrid(xx,yy);
		[x,y]=meshgrid(data.xvalues,data.yvalues);
		dd=interp2(x,y,zdata,xx,yy,'nearest');
	case 'spline'
		xx=linspace(min(data.xvalues),max(data.xvalues),(data.xrange*sv.SmoothValue));
		yy=linspace(min(data.yvalues),max(data.yvalues),(data.yrange*sv.SmoothValue));
		data.anal.xvals=xx;
		data.anal.yvals=yy;
		[xx,yy]=meshgrid(xx,yy);
		[x,y]=meshgrid(data.xvalues,data.yvalues);
		dd=interp2(x,y,zdata,xx,yy,'spline');
end

xmax=max(max(xx));
xmin=min(min(xx));
set(gh('XText'),'String',[num2str(xmin) ' > ' num2str(xmax)]);
ymin=max(max(yy));
ymax=min(min(yy));
set(gh('YText'),'String',[num2str(ymin) ' > ' num2str(ymax)]);
zmin=max(max(dd));
zmax=min(min(dd));
set(gh('ZText'),'String',[num2str(zmin) ' > ' num2str(zmax)]);

datatype='';

if data.anal.error==0;
	data.anal.error=0.5;
end

if data.areaplot==1 %& data.textload==0; %we are doing an area significance plot
	m=find(dd>data.anal.error);
	n=find(dd<=data.anal.error);
	dd(m)=1;
	dd(n)=0;
	data.anal.area=dd;
end

cla reset;
contourlevels=str2double(get(gh('SContourLevels'),'String'));

switch(sv.PlotType)	%For different plots
	
	case 'Raw Data'
		imagesc(xlinear,ylinear,zdata);
		% 	if xlinear(1) > xlinear(end);set(gca,'XDir','normal');end
		if ylinear(1) < ylinear(end);set(gca,'YDir','normal');end
		%set(gca,'XTick',data.xvalues);
		%set(gca,'YTick',data.yvalues);
		%set(gca,'YDir','normal');
		data.dim=0;
		
	case 'Mesh'
		mesh(xx,yy,dd)
		shading(sv.ShadingType);
		grid off;
		axis vis3d;
		axis tight;
		if a==0
			if b==90
				view([-45 45]);
			end
		else
			view(a,b);
		end
		data.dim=1;
		
	case 'CheckerBoard'
		pcolor(xx,yy,dd);
		shading(sv.ShadingType);
		%colormap(sv.CMap);
		data.dim=0;
		
	case 'CheckerBoard+Contour'
		pcolor(xx,yy,dd);
		shading(sv.ShadingType);
		hold on;
		if contourlevels>0
			[c,h] = contour(xx,yy,dd,contourlevels); clabel(c,h);
		else
			[c,h] = contour(xx,yy,dd,'k'); clabel(c,h);
		end
		hold off;
		data.dim=0;
		
	case 'Surface'
		surf(xx,yy,dd,'FaceColor','interp','EdgeColor','none','FaceLighting',sv.Lighting);
		material shiny;
		shading(sv.ShadingType);
		camlight headlight
		grid off;
		axis vis3d;
		axis tight;
		if a==0
			if b==90
				view([-45 45]);
			end
		else
			view(a,b);
		end
		data.dim=1;
		
		
	case 'Lighted Surface'
		surfl(xx,yy,dd);
		shading(sv.ShadingType);
		material metal;
		colormap(bone(256));
		grid off;
		axis vis3d;
		axis tight;
		if a==0
			if b==90
				view([-45 45]);
			end
		else
			view(a,b);
		end
		data.dim=1;
		
	case 'Surface+Contour'
		surfc(xx,yy,dd);
		shading(sv.ShadingType);
		grid off;
		axis vis3d;
		axis tight;
		if a==0
			if b==90
				view([-45 45]);
			end
		else
			view(a,b);
		end
		data.dim=1;
		
	case 'Contour'
		if contourlevels>0
			[c,h] = contour(xx,yy,dd,contourlevels); clabel(c,h);
		else
			[c,h] = contour(xx,yy,dd); clabel(c,h);
		end
		data.dim=0;
		
	case 'Filled Contour'
		if contourlevels>0
			[c,h] = contourf(xx,yy,dd,contourlevels); %clabel(c,h);
		else
			[c,h] = contourf(xx,yy,dd); %clabel(c,h);
		end
		data.dim=0;
		
	case 'Waterfall'
		waterfall(xx,yy,dd);
		grid off;
		axis vis3d;
		if a==0
			if b==90
				view([-45 45])
			end
		else
			view(a,b);
		end
		data.dim=1;
		
	case 'Rectangle Plot'
		if strcmp(sv.SmoothType,'none')
			rectplot(xx,yy,dd,ee);
		else
			rectplot(xx,yy,dd);
		end
		data.dim=0;
end

if (sv.PropAxis==0 && strcmp(sv.SmoothType,'none')) || strcmp(sv.PlotType,'Raw Data')
	set(gca,'XTick',xx);
	set(gca,'YTick',yy);
	set(gca,'XTickLabel',data.xvalues);
	set(gca,'YTickLabel',data.yvalues);
elseif sv.PropAxis==0
	set(gca,'XTick',x);
	set(gca,'YTick',y);
	set(gca,'XTickLabel',data.xvalues);
	set(gca,'YTickLabel',data.yvalues);
end

val=get(gh('AxisBox'), 'Value');  % Check axes

if val == 1
	if data.dim==0
		axis auto
		axis tight
		axval=axis;	 %[-inf inf -inf inf];
		set(gca,'CLimMode','auto')
		cval=caxis;
	else
		axis auto
		axis tight
		axval=axis;	%[-inf inf -inf inf -inf inf];
		set(gca,'CLimMode','auto')
		cval=caxis;
	end
else
	xval=str2num(get(gh('XAxisEdit'),'String'));
	yval=str2num(get(gh('YAxisEdit'),'String'));
	zval=str2num(get(gh('ZAxisEdit'),'String'));
	if data.dim==0
		axval=[xval yval];
		cval=zval;
	else
		axval=[xval yval zval];
		cval=zval;
	end
end

axis(axval);
caxis(cval);
if data.xrange==data.yrange
	axis square
end
data.xx=xx;
data.yy=yy;
data.dd=dd;

MakeTitle('surface');
sv.xlabelhandle=xlabel(data.xtitle);
sv.ylabelhandle=ylabel(data.ytitle);
sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
set(gca,'Tag','SpikeFigMainAxes');

if get(gh('StatBurst'),'Value')==1
	if data.plotburst==1
		burststats(data.raw);
	end
end


%----------------------------------END----------------------------------------

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plotting Function

function MakeTitle(type)

global data
global sv
resetmod=0;
resettrial=0;

if nargin<1
	type='other';
end

if sv.EndMod>data.raw{sv.xval*sv.yval*sv.zval}.nummods
	if sv.EndMod==Inf
		resetmod=1;
	end
	sv.EndMod=data.raw{sv.xval*sv.yval*sv.zval}.nummods;
end
if isfield(sv,'EndTrial')
	if sv.EndTrial>data.raw{sv.xval*sv.yval*sv.zval}.endtrial
		if sv.EndTrial==Inf
			resettrial=1;
		end
		sv.EndTrial=data.raw{sv.xval*sv.yval*sv.zval}.endtrial;
	end
end
if (get(gh('SCutTransient'),'Value')>0)
	cut='8<';
else
	cut='';
end

switch data.numvars
	case 0
		switch type
			case 'psth'
				data.matrixtitle=[data.runname 'Cell:' num2str(data.cell) ' [BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']'];
			case 'raster'
				data.matrixtitle=[data.runname 'Cell:' num2str(data.cell) ' [Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']'];
			otherwise
				m=get(gh('SMinEdit'),'String');
				n=get(gh('SMaxEdit'),'String');
				Value=get(gh('AnalysisMenu'),'Value');
				String=get(gh('AnalysisMenu'),'String');
				o=String{Value};
				if data.plotburst==1
					o=['Burst ' o];
				end
				if data.plottonic==1
					o=['Tonic ' o];
				end
				data.matrixtitle=[ data.runname 'Cell:' num2str(data.cell) ' [' o ':' m '-' n ' BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut '] '];
		end
	case 1
		switch type
			case 'psth'
				data.matrixtitle=[data.runname 'Cell:' num2str(data.cell) ' [BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']  ' data.lockedtitle];
				data.matrixtitle=[data.matrixtitle '\newline' data.xtitle '=' num2str(data.xvalues(sv.xval))];
			case 'raster'
				data.matrixtitle=[data.runname 'Cell:' num2str(data.cell) ' [Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']' data.lockedtitle];
				data.matrixtitle=[data.matrixtitle '\newline' data.xtitle '=' num2str(data.xvalues(sv.xval))];
			otherwise
				m=get(gh('SMinEdit'),'String');
				n=get(gh('SMaxEdit'),'String');
				Value=get(gh('AnalysisMenu'),'Value');
				String=get(gh('AnalysisMenu'),'String');
				o=String{Value};
				if data.plotburst==1
					o=['Burst ' o];
				end
				if data.plottonic==1
					o=['Tonic ' o];
				end
				data.matrixtitle=[ data.runname 'Cell:' num2str(data.cell) ' [' o ':' m '-' n ' BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']'];
		end
	case 2
		switch type
			case 'psth'
				data.matrixtitle=[data.runname 'Cell:' num2str(data.cell) ' [BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']\newline' data.lockedtitle];
			case 'raster'
				data.matrixtitle=[data.runname 'Cell:' num2str(data.cell) ' [Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']\newline' data.lockedtitle];
			case 'vector'
				m=get(gh('SMinEdit'),'String');
				n=get(gh('SMaxEdit'),'String');
				Value=get(gh('AnalysisMenu'),'Value');
				String=get(gh('AnalysisMenu'),'String');
				o=String{Value};
				if data.plotburst==1
					o=['Burst ' o];
				end
				if data.plottonic==1
					o=['Tonic ' o];
				end
				data.matrixtitle=[ data.runname 'Cell:' num2str(data.cell) ' [' o ':' m '-' n ' BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']\newline ' data.lockedtitle];
			case 'surface'
				m=get(gh('SMinEdit'),'String');
				n=get(gh('SMaxEdit'),'String');
				Value=get(gh('AnalysisMenu'),'Value');
				String=get(gh('AnalysisMenu'),'String');
				o=String{Value};
				if data.plotburst==1
					o=['Burst ' o];
				end
				if data.plottonic==1
					o=['Tonic ' o];
				end
				data.matrixtitle=[ data.runname 'Cell:' num2str(data.cell) ' [' o ':' m '-' n ' BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']\newline ' data.lockedtitle];
		end
	case 3
		switch type
			case 'psth'
				data.matrixtitle=[data.runname 'Cell:' num2str(data.cell) ' [BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']\newline ' data.lockedtitle];
			case 'raster'
				data.matrixtitle=[data.runname 'Cell:' num2str(data.cell) ' [Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']\newline' data.lockedtitle];
			case 'vector'
				m=get(gh('SMinEdit'),'String');
				n=get(gh('SMaxEdit'),'String');
				Value=get(gh('AnalysisMenu'),'Value');
				String=get(gh('AnalysisMenu'),'String');
				o=String{Value};
				if data.plotburst==1
					o=['Burst ' o];
				end
				if data.plottonic==1
					o=['Tonic ' o];
				end
				data.matrixtitle=[ data.runname 'Cell:' num2str(data.cell) ' [' o ':' m '-' n ' BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) ' ' cut ']\newline ' data.lockedtitle ];
			otherwise
				m=get(gh('SMinEdit'),'String');
				n=get(gh('SMaxEdit'),'String');
				Value=get(gh('AnalysisMenu'),'Value');
				String=get(gh('AnalysisMenu'),'String');
				o=String{Value};
				if data.plotburst==1
					o=['Burst ' o];
				end
				if data.plottonic==1
					o=['Tonic ' o];
				end
				data.matrixtitle=[ data.runname 'Cell:' num2str(data.cell) ' [' o ':' m '-' n ' BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod)  ']\newline ' data.lockedtitle];
		end
end

if isa(data.pR,'plxReader')
	data.matrixtitle=[ data.matrixtitle '\newline PLX Offset = ' num2str(data.pR.startOffset) ' | Cellmap = ' num2str(data.cell) '>' num2str(data.pR.cellmap(data.cell)) ' ' data.pR.tsList.names{data.pR.cellmap(data.cell)}];
end

%data.matrixtitle = ['\fontname{Helvetica}\fontsize{12}' data.matrixtitle];

sv.EndMod=str2double(get(gh('SEndMod'),'String'));
sv.EndTrial=str2double(get(gh('SEndTrial'),'String'));
if resetmod==1
	sv.EndMod=Inf;
end
if resettrial==1
	sv.EndTrial=Inf;
end

%----------------------------------END----------------------------------------

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plotting Function

function ChoosePlot

global data sv;
mainaxis=0;
xvals=[];
xname=[];

if strcmp(get(gca,'tag'),'SpikeFigMainAxes');
	mainaxis=1;
	legend off;
	cla reset;
	set(gca,'Tag','SpikeFigMainAxes');
end

set(gca,'XTickMode','auto');
set(gca,'XTickLabelMode','auto');
set(gca,'YTickMode','auto');
set(gca,'YTickLabelMode','auto');
tit=get(gh('LoadText'),'String');

if strcmp(sv.auto,'no')
	set(gh('LoadText'),'String','Replotting...');
end

data.plottype=get(gh('SPlotMenu'),'Value');
data.lockedtitle='';

switch data.plottype
	case {1,2,3,4,5}
		if data.numvars>0; sv.xlock=1; set(gh('XHoldCheck'),'Value',1); end
		if data.numvars>1; sv.ylock=1; set(gh('YHoldCheck'),'Value',1); end
		if data.numvars>2; sv.zlock=1; set(gh('ZHoldCheck'),'Value',1); end
	case 6 %tuning curve
		if get(gh('STypeMenu'),'Value')>4; set(gh('STypeMenu'),'Value',1); end
		set(gh('STypeMenu'),'String',{'Normal';'Polar+Means (Cartesian)';'Polar+Error (Cartesian)';'Polar+Error (Compass)'});
		set(gh('STypeMenu'),'Enable','on');
		if sv.xlock==1 && data.numvars==1
			sv.xlock=0;
			set(gh('XHoldCheck'),'Value',0);
		elseif sv.xlock==1 && sv.ylock==1 && data.numvars==2
			sv.xlock=0;
			set(gh('XHoldCheck'),'Value',0);
		elseif sv.xlock==1 && sv.ylock==0
			sv.zlock=1; set(gh('ZHoldCheck'),'Value',1);
		else
			sv.xlock=0;	set(gh('XHoldCheck'),'Value',0);
			sv.ylock=1; set(gh('YHoldCheck'),'Value',1);
			sv.zlock=1; set(gh('ZHoldCheck'),'Value',1);
		end
	case 7 %surface
		set(gh('STypeMenu'),'String',{'Raw Data';'Mesh';'CheckerBoard';'CheckerBoard+Contour';'Surface';'Lighted Surface';'Surface+Contour';'Contour';'Filled Contour';'Waterfall';'Rectangle Plot'});
		sv.xlock=0;
		sv.ylock=0;
		set(gh('XHoldCheck'),'Value',0);
		set(gh('YHoldCheck'),'Value',0);
end

if data.plotburst==1
	matrixall=data.bmatrixall;
elseif data.plottonic==1
	matrixall=data.tmatrixall;
else
	matrixall=data.matrixall;
end

%--------We'll now iterate through all the possible variable variations---

%----------------------------------------------------------no locks
if sv.zlock==0 && sv.ylock==0 && sv.xlock==0
	switch data.numvars
		case 3
			data.lockedtitle=[data.ztitle '=' num2str(data.zvalues(1))];
			%if data.plottype<4 data.plottype=4; set(gh('SPlotMenu'),'Value',data.plottype); end
		case 2
			%if data.plottype<4 data.plottype=4; set(gh('SPlotMenu'),'Value',data.plottype); end
	end
	data.matrix=matrixall(:,:,1);
	data.errormat=data.errormatall(:,:,1);
	
	%----------------------------------------------------------Z locked
elseif sv.zlock==1 && sv.ylock==0 && sv.xlock==0
	switch data.numvars
		case 3
			data.lockedtitle=[data.ztitle '=' num2str(data.zvalues(sv.zval))];
			%if data.plottype<4 data.plottype=4; set(gh('SPlotMenu'),'Value',data.plottype); end
		case 2
			%if data.plottype<4 data.plottype=4; set(gh('SPlotMenu'),'Value',data.plottype); end
	end
	data.matrix=matrixall(:,:,sv.zval);
	data.errormat=data.errormatall(:,:,sv.zval);
	
	%----------------------------------------------------------Z and Y locked
elseif sv.zlock==1 && sv.ylock==1 && sv.xlock==0
	if data.numvars==3
		data.lockedtitle=['\newline ' data.ztitle '=' num2str(data.zvalues(sv.zval)) '/' data.ytitle '=' num2str(data.yvalues(sv.yval))];
	elseif data.numvars==2
		data.lockedtitle=[data.ytitle '=' num2str(data.yvalues(sv.yval))];
	end
	xvals=data.xvalues;
	xname=data.xtitle;
	if data.plottype>6; data.plottype=6; set(gh('SPlotMenu'),'Value',data.plottype); end
	data.matrix=matrixall(sv.yval,:,sv.zval);
	data.errormat=data.errormatall(sv.yval,:,sv.zval);
	
	%----------------------------------------------------------X and Y and Z locked
elseif sv.zlock==1 && sv.ylock==1 && sv.xlock==1
	if data.numvars==3
		data.lockedtitle=[data.ztitle '=' num2str(data.zvalues(sv.zval)) '/' data.ytitle '=' num2str(data.yvalues(sv.yval)) '/' data.xtitle '=' num2str(data.xvalues(sv.xval))];
	elseif data.numvars==2
		data.lockedtitle=[data.ytitle '=' num2str(data.yvalues(sv.yval))  '/' data.xtitle '=' num2str(data.xvalues(sv.xval)) ];
	end
	if data.plottype>5; data.plottype=4; set(gh('SPlotMenu'),'Value',data.plottype); end
	data.matrix=matrixall(sv.yval,sv.xval,sv.zval);
	data.errormat=data.errormatall(sv.yval,sv.xval,sv.zval);
	
	%----------------------------------------------------------X and Y locked
elseif sv.zlock==0 && sv.ylock==1 && sv.xlock==1
	if data.numvars==3
		data.lockedtitle=['\newline ' data.ytitle '=' num2str(data.yvalues(sv.yval)) '/' data.xtitle '=' num2str(data.xvalues(sv.xval))];
	elseif data.numvars==2
		data.lockedtitle=[data.ytitle '=' num2str(data.yvalues(sv.yval)) ' / ' data.xtitle '=' num2str(data.xvalues(sv.xval))];
	end
	if data.plottype>6; data.plottype=6; set(gh('SPlotMenu'),'Value',data.plottype); end
	data.matrix=matrixall(sv.yval,sv.xval,:);
	data.errormat=data.errormatall(sv.yval,sv.xval,:);
	
	%----------------------------------------------------------Z and X locked
elseif sv.zlock==1 && sv.ylock==0 && sv.xlock==1
	if data.numvars==3
		data.lockedtitle=[data.xtitle '=' num2str(data.xvalues(sv.xval)) '/' data.ytitle '=' num2str(data.yvalues(sv.yval))];
	elseif data.numvars==2
		data.lockedtitle=' r ';
		data.lockedtitle=[data.xtitle '=' num2str(data.xvalues(sv.xval))];
	end
	if data.plottype>6; data.plottype=6; set(gh('SPlotMenu'),'Value',data.plottype); end
	xvals=data.yvalues;
	xname=data.ytitle;
	data.matrix=matrixall(:,sv.xval,sv.zval)';
	data.errormat=data.errormatall(:,sv.xval,sv.zval)';
	
	%----------------------------------------------------------Y Locked
elseif sv.zlock==0 && sv.ylock==1 && sv.xlock==0
	switch data.numvars
		case 3
			data.lockedtitle=[data.ytitle '=' num2str(data.yvalues(sv.yval)) '/' data.ztitle '=' num2str(data.zvalues(sv.zval))];
			subindex=index(index(:,3)==sv.yval,:);
			data.matrix=matrixall(subindex(:,1))';
			data.matrix=reshape(data.matrix);
		case 2
			if data.plottype>6; data.plottype=6; set(gh('SPlotMenu'),'Value',data.plottype); end
			data.lockedtitle=[data.ytitle '=' num2str(data.yvalues(sv.yval))];
			data.matrix=matrixall(sv.yval,:,1);
			data.errormat=data.errormatall(sv.yval,:,1);
		otherwise
			if data.plottype>6; data.plottype=6; set(gh('SPlotMenu'),'Value',data.plottype); end
			data.matrix=matrixall(sv.yval,:,1);
			data.errormat=data.errormatall(sv.yval,:,1);
	end
	
	%----------------------------------------------------------X locked
elseif sv.zlock==0 && sv.ylock==0 && sv.xlock==1
	switch data.numvars
		case 3
			data.lockedtitle=[data.ytitle '=' num2str(data.yvalues(sv.yval)) '/' data.ztitle '=' num2str(data.zvalues(sv.zval))];
			subindex=index(index(:,3)==sv.yval,:);
			data.matrix=matrixall(subindex(:,1))';
			data.matrix=reshape(data.matrix);
		case 2
			if data.plottype>6; data.plottype=6; set(gh('SPlotMenu'),'Value',data.plottype); end
			xvals=data.yvalues;
			xname=data.ytitle;
			data.lockedtitle=[data.ytitle '=' num2str(data.yvalues(sv.yval))];
			data.matrix=matrixall(:,sv.xval,sv.zval)';
			data.errormat=data.errormatall(:,sv.xval,sv.zval)';
		otherwise
			if data.plottype>6; data.plottype=6; set(gh('SPlotMenu'),'Value',data.plottype); end
			data.matrix=matrixall(sv.yval,sv.xval,sv.zval);
			data.errormat=data.errormatall(sv.yval,sv.xval,sv.zval);
	end
end

if data.plotburst==1
	data.bmatrix = data.matrix;
elseif data.plottonic==1
	data.tmatrix = data.matrix;
end


%---------------Take slices out of the matrix-------------------
data.xvalues=data.xvalueso;
data.yvalues=data.yvalueso;

xslice = str2num(get(gh('SXSlice'),'String'));
yslice = str2num(get(gh('SYSlice'),'String'));

if length(xslice)<length(data.xvalueso) && size(data.matrix,2)>1
	ind=[];
	for i=1:length(xslice)
		ind=[ind find(data.xvalueso==xslice(i))];
	end
	if ~isempty(ind)
		data.matrix=data.matrix(:,ind);
		data.errormat=data.errormat(:,ind);
		data.xvalues=data.xvalueso(ind);
		data.xrange=length(data.xvalues);
		data.xindex=ind;
	end
end
if length(yslice)<length(data.yvalues) && size(data.matrix,1)>1
	ind=[];
	for i=1:length(yslice)
		ind=[ind find(data.yvalues==yslice(i))];
	end
	if ~isempty(ind)
		data.matrix=data.matrix(ind,:);
		data.errormat=data.errormat(ind,:);
		data.yvalues=data.yvalueso(ind);
		data.yrange=length(data.yvalues);
		data.yindex=ind;
	end
end
%-------------------------------------------------------------

switch data.numvars
	case 0
		switch data.plottype
			case 1
				PlotISI;
			case 2
				PlotIntervalogram;
			case 3
				PlotCellRaster;
			case 4
				PlotPSTH;
			case 5
				PlotFanogram;
			otherwise
				PlotPoint;
		end
	case 1
		switch data.plottype
			case 1
				PlotISI;
			case 2
				PlotIntervalogram;
			case 3
				PlotCellRaster;
			case 4
				PlotPSTH;
			case 5
				PlotFanogram;
			otherwise
				PlotVector;
		end
	otherwise
		switch data.plottype
			case 1
				PlotISI;
			case 2
				PlotIntervalogram;
			case 3
				PlotCellRaster;
			case 4
				PlotPSTH;
			case 5
				PlotFanogram;
			case 6
				PlotVector(xvals,xname);
			otherwise
				PlotDMatrix;
		end
end

if strcmp(sv.auto,'no')
	set(gh('LoadText'),'String',tit);
end
if mainaxis==1
	set(gca,'tag','SpikeFigMainAxes');
end

switch sv.layer
	case 'top'
		set(gca,'Layer','top');
	case 'bottom'
		set(gca,'Layer','bottom');
end
switch sv.ticks
	case 'in'
		tickdir('in');
	case 'out'
		tickdir('out');
end
switch sv.box
	case 'on'
		box on;
	case 'off'
		box off;
end
%----------------------------------END----------------------------------------

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot ISI

%function PlotTrialograph

%global data sv;

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot Fanogram

function PlotFanogram

global data sv;

window=str2double(get(gh('SISIWindow'),'String'));
shift=str2double(get(gh('SISIShift'),'String'));
maxt=str2num(get(gh('SMaxEdit'),'String'));

[ff,cv,af,time,position]=fanogram(data.raw{sv.yval, sv.xval, sv.zval},window,shift,data.wrapped);
if position == 3
	tpos = 'end';
elseif position == 2
	tpos = 'middle';
else
	tpos = 'start';
end

plot(time,ff,'k-');
hold on;
plot(time,cv,'b-.');
plot(time,af,'r-.');
hold off;
axis tight;
if maxt > max(time)-window
	maxt = max(time)-window;
end
axis([window maxt -inf inf]);
legend('fano factor','CV','Allan Factor');
MakeTitle('raster');
sv.xlabelhandle=xlabel('Time (ms)','FontSize',sv.labelsize);
sv.ylabelhandle=ylabel(['FF / C_V/ AF - window:' num2str(window) ' shift: ' num2str(shift) ' position: ' tpos],'FontSize',sv.labelsize);
sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot ISI

function PlotISI

global data sv;

window=str2double(get(gh('SISIWindow'),'String'));

[isis,c_v]=getisi(data.raw{sv.yval, sv.xval, sv.zval},window);
[isi,xax]=hist(isis,window);
bar(xax,isi,1,'k');
axis tight;
MakeTitle('raster');
data.matrixtitle = [data.matrixtitle '\newline Coefficient of Variation C_v = ' num2str(c_v)];
clipboard('copy',sprintf('%2.3f',c_v));
sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
sv.xlabelhandle=xlabel('Time (ms)','FontSize',sv.labelsize);
sv.ylabelhandle=ylabel('Number of Intervals','FontSize',sv.labelsize);
val=get(gh('AxisBox'), 'Value');  % Check axes
if val == 1
	axis tight;
	axval=[-inf inf -inf inf];
else
	xval=str2num(get(gh('XAxisEdit'),'String'));
	yval=str2num(get(gh('YAxisEdit'),'String'));
	axval=[xval yval];
end
axis(axval);

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot PSTHs in a grid

function PlotIntervalogram

global data sv;
window=str2double(get(gh('SISIWindow'),'String'));
shift=str2double(get(gh('SISIShift'),'String'));

[interv,xax]=intervalogram(data.raw{sv.yval, sv.xval, sv.zval},window,shift);
imagesc(interv);
axis tight;
set(gca,'YDir','Normal')
MakeTitle('raster');
sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
sv.xlabelhandle=xlabel('Time (ms)','FontSize',sv.labelsize);
sv.ylabelhandle=ylabel([num2str(window) 'ms window - '  num2str(shift) 'ms steps'],'FontSize',sv.labelsize);

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot PSTHs in a grid

function PlotCellRaster

global data sv;

mint=str2num(get(gh('SMinEdit'),'String'));   %this selects what to plot
maxt=str2num(get(gh('SMaxEdit'),'String'));
if isempty(mint) || mint < min(data.time{1})
	mint=min(data.time{1});
	set(gh('SMinEdit'),'String',num2str(min(data.time{1})));
end
if isempty(maxt) || maxt > max(data.time{1})
	maxt=max(data.time{1});
	set(gh('SMaxEdit'),'String',num2str(max(data.time{1})));
end
maxt = maxt/1000;
plotraster(data.raw{sv.yval, sv.xval, sv.zval},[],[],[],[],maxt);
MakeTitle('raster');
nr=sum(data.psth{sv.yval, sv.xval, sv.zval});
bnr=sum(data.bpsth{sv.yval, sv.xval, sv.zval});
err=finderror(data.raw{sv.yval,sv.xval,sv.zval},'Fano Factor',0,inf,data.wrapped,0);
data.matrixtitle = [data.matrixtitle '\newlinefano factor = ' num2str(err) ' #: ' num2str(nr) ' #b: ' num2str(bnr) ' Bratio:' num2str(bnr/nr)];
clipboard('copy',[sprintf('%2.3f\t',err) sprintf('%d\t',nr) sprintf('%2.3f\t',bnr) sprintf('%2.3f\t',(bnr/nr)) sprintf('%2.3f',data.raw{sv.yval,sv.xval,sv.zval}.numtrials)]);
sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
sv.xlabelhandle=xlabel('Time (s)','FontSize',sv.labelsize);
sv.ylabelhandle=ylabel('Trials','FontSize',sv.labelsize);

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot PSTHs in a grid

function PlotAllPSTHs

global data sv;

data.areaplot=0;
sv.psthhandle=figure;
set(gcf,'Tag','psthplotfig');
figpos(1,[850 750]);
set(gcf,'Color',[1 1 1]);

mint=get(gh('SMinEdit'),'String');   %this selects what to plot
maxt=get(gh('SMaxEdit'),'String');
if isempty(mint) || str2double(mint)<min(data.time{1})
	mint=min(data.time{1});
	set(gh('SMinEdit'),'String',num2str(min(data.time{1})));
end
if isempty(maxt) || str2double(maxt)>max(data.time{1})
	maxt=max(data.time{1});
	set(gh('SMaxEdit'),'String',num2str(max(data.time{1})));
end
mini=find(data.time{1}==str2double(mint));
maxi=find(data.time{1}==str2double(maxt));

switch data.numvars
	case 0
		if ~strcmp(sv.auto,'report')
			splot;
			return;
		end
	case 1
		p=panel(sv.psthhandle,'defer');
		if get(gh('PSTHEdit'),'String')=='0'
			m=1; %this will find the max value out of all the PSTH's and scale by this
			for i=1:data.xrange
				maxm = max(data.psth{data.xindex(i)});
				if m<=maxm
					m=maxm;
				end
			end
			m=round(m+m/20);  %just to scale a bit bigger than the maximum value
			set(gh('PSTHText'),'String',num2str(m));
		else
			m=str2double(get(gh('PSTHEdit'),'String'));
			set(gh('PSTHText'),'String',num2str(m));
		end
		
		p.pack(data.xrange,1);
		for i=1:data.xrange
			p(i,1).select();
			%subaxis(data.xrange,1,i,'S',0,'P',0,'M',0.1);
			h(1)=bar(data.time{data.xindex(i)}(mini:maxi),data.psth{data.xindex(i)}(mini:maxi),1,'k');
			p(i,1).hold('on')
			h(2)=bar(data.time{data.xindex(i)}(mini:maxi),data.bpsth{data.xindex(i)}(mini:maxi),1,'r');
			p(i,1).hold('off')
			set(h,'BarWidth', 1,'EdgeColor','none', 'ShowBaseLine', 'off')
			if i<data.xrange
				set(gca,'XTickLabel',[]);
			end
			set(gca,'TickLength',[0.01 0.01],'TickDir','in','YTickLabel',[]);
			text(data.time{1}(mini),(m-m/10), data.names{data.xindex(i)},'FontSize',10,'Color',[0.7 0.7 0.7]);
			ylabel(num2str(data.xvalues(i)));
			axis([data.time{1}(mini) data.time{1}(maxi) 0 m]);
		end
		t=[data.runname ' Cell:' num2str(sv.firstunit) ' [BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) '] max = ' num2str(m) ' time = ' num2str(data.time{1}(mini)) '-' num2str(data.time{1}(maxi)) 'ms'];
		if isa(data.pR,'plxReader')
			t=[ t '\newline PLX Offset = ' num2str(data.pR.startOffset) ' | Cellmap = ' num2str(data.cell) '>' num2str(data.pR.cellmap(data.cell)) ' ' data.pR.tsList.names{data.pR.cellmap(data.cell)}];
		end
		%[ax,h1]=suplabel([data.xtitle ' (' num2str(data.xvalues) ')'],'x');
		%[ax,h2]=suplabel(t ,'t');
		p.xlabel('Time (ms)');
		p.title(t);
		p.de.margin = 0;
		p.margin = [15 15 5 15];
		p.fontsize = 12;
		p.de.fontsize = 10;
		% because we 'defer'red, we have to refresh.
		p.refresh();
	otherwise
		p=panel(sv.psthhandle,'defer');
		xrange=length(data.xvalueso); %we'll ignore the subselection
		yrange=length(data.yvalueso);
		zrange=length(data.zvalueso);
		
		if data.numvars==3 %we need to correct the index for the third variable
			if sv.zval==1
				starti=1;
				endi=xrange*yrange;
			else
				starti=(xrange*yrange*(sv.zval-1))+1;
				endi=xrange*yrange*sv.zval;
			end
		else
			starti=1;
			endi=xrange*yrange;
		end
		
		if strcmp(get(gh('PSTHEdit'),'String'),'0')
			m=1; %this will find the max value out of all the PSTH's and scale by this
			for i=starti:endi
				maxm=max(data.psth{i});
				if m < maxm
					m = maxm;
				end
			end
			m=round(m+m/10);  %just to scale a bit bigger than the maximum value
			set(gh('PSTHText'),'String',num2str(m));
		else
			m=str2double(get(gh('PSTHEdit'),'String'));
			set(gh('PSTHText'),'String',num2str(m));
		end
		%the problem is that our data is in rows, but subplot indexes in columns
		%so we have to create an index that converts between the 2 as
		%i want the data to look that same as it is loaded into the matrices
		x = starti:endi;
		xx = x - (xrange*yrange*(sv.zval-1));
		y = reshape(x,data.yrange,data.xrange);
		yy = reshape(xx,data.yrange,data.xrange);
		%y=fliplr(y'); %order it so we can load our data to look like the surface plots
		%subaxis(data.yrange,data.xrange,1,'S',0,'M',0.09,'P',0)
		a=1;
		p.pack(data.yrange,data.xrange);
		for i=1:length(x)
			[i1,i2] = ind2sub([data.yrange,data.xrange],xx(i));
			p(i1,i2).select();
			h(1)=bar(data.time{y(i)}(mini:maxi),data.psth{y(i)}(mini:maxi),1,'k');
			p(i1,i2).hold('on')
			h(2)=bar(data.time{(i)}(mini:maxi),data.bpsth{y(i)}(mini:maxi),1,'r');
			p(i1,i2).hold('off')
			set(h,'BarWidth', 1,'EdgeColor','none', 'ShowBaseLine', 'off')
			set(gca,'TickLength',[0.01 0.01],'TickDir','in','XTickLabel',[],'YTickLabel',[],'XGrid','on','YGrid','on');
			axis([data.time{1}(mini) data.time{1}(maxi) 0 m]);
			text(data.time{1}(mini),(m-m/10), data.names{y(i)},'FontSize',10,'Color',[0.7 0.7 0.7]);
			a=a+1;
		end
		t=[data.runname ' Cell:' num2str(sv.firstunit) ' [BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) '] max = ' num2str(m) ' time = ' num2str(data.time{1}(mini)) '-' num2str(data.time{1}(maxi)) 'ms'];
		if data.numvars==3
			t=[t '\newline' data.ztitle '=' num2str(data.zvalueso(sv.zval))];
		end
		if isa(data.pR,'plxReader')
			t=[ t '\newline PLX Offset = ' num2str(data.pR.startOffset) ' | Cellmap = ' num2str(data.cell) '>' num2str(data.pR.cellmap(data.cell)) ' ' data.pR.tsList.names{data.pR.cellmap(data.cell)}];
		end
		p.xlabel([data.xtitle ' (' num2str(data.xvalueso) ')']);
		p.ylabel([data.ytitle ' (' num2str(fliplr(data.yvalueso)) ')']);
		p.title(t);
		p.de.margin = 0;
		p.margin = [15 15 5 15];
		p.fontsize = 12;
		p.de.fontsize = 10;
		%[ax,h1]=suplabel([data.xtitle ' (' num2str(data.xvalueso) ')'],'x');
		%[ax,h2]=suplabel([data.ytitle ' (' num2str(data.yvalueso) ')'],'y');
		%[ax,h3]=suplabel(t ,'t');
		%set(h1,'FontSize',12)
		% because we 'defer'red, we have to refresh.
		p.refresh();
		
end
set(gcf,'Renderer','painters','ResizeFcn',[]);

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot PSTHs in a grid

function PlotAll

global data sv;

data.areaplot=0;
sv.allhandle=figure;
set(gcf,'Tag','allplotfig');
figpos(1,[1200 1200]); delete(get(gcf,'Children'))
set(gcf,'Color',[1 1 1]);

mint=str2num(get(gh('SMinEdit'),'String'));   %this selects what to plot
maxt=str2num(get(gh('SMaxEdit'),'String'));
if isempty(mint) || mint < min(data.time{1})
	mint=min(data.time{1});
	set(gh('SMinEdit'),'String',num2str(min(data.time{1})));
end
if isempty(maxt) || maxt > max(data.time{1})
	maxt=max(data.time{1});
	set(gh('SMaxEdit'),'String',num2str(max(data.time{1})));
end
mini = find( data.time{1} == mint );
maxi = find( data.time{1} == maxt );

tic
switch data.numvars
	case 0
		if ~strcmp(sv.auto,'report')
			splot;
			return;
		end
	case 1
		p=panel(sv.allhandle);
		if get(gh('PSTHEdit'),'String')=='0'
			m=1; %this will find the max value out of all the PSTH's and scale by this
			for i=1:data.xrange
				maxm = max(data.psth{data.xindex(i)});
				if m<=maxm
					m=maxm;
				end
			end
			m=round(m+m/20);  %just to scale a bit bigger than the maximum value
			set(gh('PSTHText'),'String',num2str(m));
		else
			m=str2double(get(gh('PSTHEdit'),'String'));
			set(gh('PSTHText'),'String',num2str(m));
		end
		
		p.pack(data.xrange,1);
		for i=1:data.xrange
			p(i,1).pack(2,1);
			p(i,1,1,1).select();
			time = data.time{data.xindex(i)}(mini:maxi);
			psth = data.psth{data.xindex(i)}(mini:maxi);
			bpsth = data.bpsth{data.xindex(i)}(mini:maxi);
			h(1)=bar(data.time{data.xindex(i)}(mini:maxi),data.psth{data.xindex(i)}(mini:maxi),1,'k');
			p(i,1,1,1).hold('on')
			h(2)=bar(data.time{data.xindex(i)}(mini:maxi),data.bpsth{data.xindex(i)}(mini:maxi),1,'r');
			set(h,'BarWidth', 1,'EdgeColor','none', 'ShowBaseLine', 'off')
			if sv.plotBARS == 1
				trials = data.numtrials;
				doBARS(time, psth, trials);
				close(wh);
				if ~isempty(data.bars)
					if isfield(data.bars,'mean')
						set(gca, 'NextPlot', 'add');
						plot(data.bars.time_fine,data.bars.mode_fine,'r-','LineWidth',1);
						plot(data.bars.time_fine,data.bars.confBands_fine,'r:');
						set(gca, 'NextPlot', 'replace');
					end
				end
			end
			if i<data.xrange
				set(gca,'XTickLabel',[]);
			end
			set(gca,'TickLength',[0.01 0.01],'TickDir','in','YTickLabel',[]);
			text(data.time{1}(mini),(m-m/10), data.names{data.xindex(i)},'FontSize',10,'Color',[0.7 0.7 0.7]);
			ylabel(num2str(data.xvalues(i)));
			axis([data.time{1}(mini) data.time{1}(maxi) 0 m]);
			p(i,1,1,1).hold('off')
			p(i,1,2,1).select();
			plotraster(data.raw{i});
			axis([time(mini)/1000 time(maxi)/1000 -inf inf]);
		end
		t=[data.runname ' Cell:' num2str(sv.firstunit) ' [BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) '] max = ' num2str(m) ' time = ' num2str(data.time{1}(mini)) '-' num2str(data.time{1}(maxi)) 'ms'];
		%[ax,h1]=suplabel([data.xtitle ' (' num2str(data.xvalues) ')'],'x');
		%[ax,h2]=suplabel(t ,'t');
		if isa(data.pR,'plxReader')
			t=[ t '\newline PLX Offset = ' num2str(data.pR.startOffset) ' | Cellmap = ' num2str(data.cell) '>' num2str(data.pR.cellmap(data.cell)) ' ' data.pR.tsList.names{data.pR.cellmap(data.cell)}];
		end
		p.xlabel('Time (ms)');
		p.title(t);
		p.de.margin = 0;
		p.margin = [15 15 5 15];
		p.fontsize = 12;
		p.de.fontsize = 10;
		% because we 'defer'red, we have to refresh.
		%p.refresh();
	otherwise
		p=panel(sv.allhandle);
		s = size(data.psth);
		xrange=s(2);
		yrange=s(1);
		if length(s)>2
			zrange=s(3);
		else
			zrange=1;
		end
		
		starti=1;
		endi=xrange*yrange*zrange;
		
		if data.numvars==3 %we need to correct the index for the third variable
			xmult = xrange*zrange;
		else
			xmult = xrange;
		end
		
		if strcmp(get(gh('PSTHEdit'),'String'),'0')
			m=1; %this will find the max value out of all the PSTH's and scale by this
			for i=starti:endi
				maxm=max(data.psth{i}(mini:maxi));
				if m < maxm
					m = maxm;
				end
			end
			mm = converttotime(m);
			xm=round(m+m/10);  %just to scale a bit bigger than the maximum value
			set(gh('PSTHText'),'String',num2str(xm));
		else
			xm=str2double(get(gh('PSTHEdit'),'String'));
		end
		
		x = starti:endi;
		xx = reshape(x,yrange,xmult);
		a=1;
		p.pack(yrange,xmult);
		for i=1:length(x)
			[i1,i2] = ind2sub([yrange,xmult],xx(i));
			time = data.time{i}(mini:maxi);
			psth = data.psth{i}(mini:maxi);
			psth = (psth/m) * mm;
			bpsth = data.bpsth{i}(mini:maxi);
			p(i1,i2).pack('v',[2/3 -1]);
			p(i1,i2,1).select();
			h(1)=bar(time, psth , 1, 'k');
			p(i1,i2,1).hold('on')
			h(2)=bar(time, bpsth, 1, 'r');
			set(h,'BarWidth', 1,'EdgeColor','none', 'ShowBaseLine', 'off')
			if i <= yrange
				p(i1,i2,1).ylabel('Firing Rate (Hz)');
				set(gca,'TickLength',[0.01 0.01],'TickDir','in','XTickLabel',[],'XGrid','on','YGrid','on');
			else
				set(gca,'TickLength',[0.01 0.01],'TickDir','in','XTickLabel',[],'YTickLabel',[],'XGrid','on','YGrid','on');
			end
			axis([data.time{i}(mini) data.time{i}(maxi) 0 mm]);
			text(data.time{i}(mini), (mm-mm/20), data.names{i},'FontSize',12,'Color',[0.7 0.7 0.7]);
			if sv.plotBARS == 1
				wh=waitbar(0.3,'Calculating BARS, please wait...');
				trials = data.raw{i}.numtrials;
				doBARS(data.time{i}, data.psth{i}, trials);
				if ~isempty(data.bars)
					if isfield(data.bars,'mean')
						p(i1,i2,1).select();
						plot(data.bars.time_fine,(data.bars.mode_fine/m)*mm,'r-','LineWidth',1);
						plot(data.bars.time_fine,(data.bars.confBands_fine/m)*mm,'r:');
					end
				end
				close(wh);
			end
			p(i1,i2,1).hold('off')
			p(i1,i2,2).select();
			plotraster(data.raw{i});
			axis([data.time{i}(mini)/1000 data.time{i}(maxi)/1000 -inf inf]);
			if i <= yrange
				set(gca,'TickLength',[0.01 0.01],'TickDir','in');
			else
				p(i1,i2,2).ylabel('');
				set(gca,'TickLength',[0.01 0.01],'TickDir','in','YTickLabel',[]);
			end
			if ~mod(i,yrange) == 0
				set(gca, 'XTickLabel',[]);
			end
			a=a+1;
		end
		t=[data.runname ' Cell:' num2str(sv.firstunit) ' [BW:' num2str(data.binwidth) 'ms Trials:' num2str(sv.StartTrial) '-' num2str(sv.EndTrial) ' Mods:' num2str(sv.StartMod) '-' num2str(sv.EndMod) '] max = ' num2str(mm) ' time = ' num2str(data.time{1}(mini)) '-' num2str(data.time{1}(maxi)) 'ms'];
		if data.numvars==3
			t=[t '\newline Z VALUES ' data.ztitle '=' num2str(data.zvalues)];
		end
		if isa(data.pR,'plxReader')
			t=[ t '\newline PLX Offset = ' num2str(data.pR.startOffset) ' | Cellmap = ' num2str(data.cell) '>' num2str(data.pR.cellmap(data.cell)) ' ' data.pR.tsList.names{data.pR.cellmap(data.cell)}];
		end
		p.xlabel([data.xtitle ' (' num2str(data.xvalueso) ')']);
		p.ylabel([data.ytitle ' (' num2str(fliplr(data.yvalueso)) ')']);
		p.title(t);
		p.de.margin = 0;
		p.margin = [15 15 5 15];
		p.fontsize = 12;
		p.de.fontsize = 10;
		%[ax,h1]=suplabel([data.xtitle ' (' num2str(data.xvalueso) ')'],'x');
		%[ax,h2]=suplabel([data.ytitle ' (' num2str(data.yvalueso) ')'],'y');
		%[ax,h3]=suplabel(t ,'t');
		%set(h1,'FontSize',12)
		% because we 'defer'red, we have to refresh.
		%p.refresh();
		
end
fprintf('--->SPIKES: Plot All processing took: %g seconds\n',toc);
set(gcf,'Renderer','painters','ResizeFcn',[]);

%----------------------------------END----------------------------------------

function [time,psth,bpsth,mint,maxt] = selectPSTH()
global data sv

mint=str2double(get(gh('SMinEdit'),'String'));   %this selects what to plot
maxt=str2double(get(gh('SMaxEdit'),'String'));

if isempty(mint) || isempty(maxt)
	mini=1;
	maxi=length(data.time{1});
else
	if mint<min(data.time{1})
		mint=min(data.time{1});
		set(gh('SMinEdit'),'String',num2str(min(data.time{1})));
	end
	if maxt>max(data.time{1})
		maxt=max(data.time{1});
		set(gh('SMaxEdit'),'String',num2str(max(data.time{1})));
	end
	mini=find(data.time{1}==mint);
	maxi=find(data.time{1}==maxt);
end

psth=data.psth{sv.yval,sv.xval,sv.zval}(mini:maxi);
time=data.time{sv.yval,sv.xval,sv.zval}(mini:maxi);
bpsth=data.bpsth{sv.yval,sv.xval,sv.zval}(mini:maxi);


%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot a PSTH

function PlotPSTH

global data sv

[time,psth,bpsth,mint,maxt] = selectPSTH();

nr=sum(psth);
bnr=sum(bpsth);
ff=finderror(data.raw{sv.yval,sv.xval,sv.zval},'Fano Factor',mint,maxt+data.binwidth,data.wrapped,0);
cv=finderror(data.raw{sv.yval,sv.xval,sv.zval},'Coefficient of Variation',mint,maxt+data.binwidth,data.wrapped,0);
af=finderror(data.raw{sv.yval,sv.xval,sv.zval},'Allan Factor',mint,maxt+data.binwidth,data.wrapped,0);

clear pr rr;
if data.wrapped==1 && ~isempty(data.tempfreq)
	modtime=data.modtime/10000; %convert our modtime to seconds
	pspikes=data.rawspikes{sv.yval,sv.xval,sv.zval}/1000; %same
	pspikes=pspikes/modtime; %convert our spikes into modulation time
	pspikes=pspikes*(2*pi); %convert into radians
	%[t,r,d]=circmean(pspikes);
	if ~isempty(pspikes)
		[t,rr]=circmean(pspikes);
		[pr,rrr]=rayleigh(pspikes);
	end
end

m=max(psth);
m=round(m+m/10);  %just to scale a bit bigger than the maximum value
set(gh('PSTHText'),'String',num2str(m));

%colormap([0 0 0;1 0 0]);
h(1)=bar(time,psth,'BarWidth', 1 ,'FaceColor',[0 0 0],'EdgeColor','none', 'ShowBaseLine', 'off');
hold on;
h(2)=bar(time,bpsth,'BarWidth', 1 ,'FaceColor',[0.8 0 0],'EdgeColor','none', 'ShowBaseLine', 'off');
hold off;

mf=max(psth);
[mf,trials]=converttotime(mf);

if sv.plotBARS == 1
	wh=waitbar(0.3,'Calculating BARS, please wait...');
	doBARS(time,psth,trials);
	close(wh);
	if ~isempty(data.bars)
		if isfield(data.bars,'mean')
			hold on
			plot(data.bars.time_fine,data.bars.mode_fine,'r-','LineWidth',1);
			plot(data.bars.time_fine,data.bars.confBands_fine,'r:');
			hold off
		end
	end
	
end

sv.xlabelhandle=xlabel('Time (ms)','FontSize',sv.labelsize*1.3);
sv.ylabelhandle=ylabel(['Spikes/Bin (Hz max = ' sprintf('%.4g',mf) ')'],'FontSize',sv.labelsize*1.3);
MakeTitle('psth');
data.matrixtitle = [data.matrixtitle '\newlineFF: ' sprintf('%2.2f',ff)];
if exist('pr','var')
	data.matrixtitle = [data.matrixtitle ' VS: ' sprintf('%2.2f',rr) ' R: ' sprintf('%0.2g',pr) ' Mean: ' sprintf('%3.2f',data.matrix) ' (\pm ' sprintf('%2.2f',data.errormat) ') #: ' num2str(nr) ' #b: ' num2str(bnr) ' B_r: ' num2str(bnr/nr)];
	clipboard('copy',[sprintf('%2.3f\t',ff) sprintf('%2.3f\t',cv) sprintf('%2.3f\t',rr) sprintf('%0.5g\t',pr) sprintf('%d\t',nr) sprintf('%2.3f\t',data.matrix) sprintf('%2.3f\t',data.errormat) sprintf('%2.3f\t',bnr) sprintf('%2.3f\t',(bnr/nr)) sprintf('%2.3f',data.raw{sv.yval,sv.xval,sv.zval}.numtrials)]);
else
	data.matrixtitle = [data.matrixtitle ' Mean: ' sprintf('%3.2f',data.matrix) '(\pm' sprintf('%2.2f',data.errormat) ') #: ' num2str(nr) ' #b: ' num2str(bnr) ' B_r: ' num2str(bnr/nr)];
	clipboard('copy',[sprintf('%2.3f\t',ff) sprintf('%2.3f\t',data.matrix) sprintf('%2.3f\t',data.errormat) sprintf('%2.3f\t',bnr) sprintf('%2.3f\t',(bnr/nr)) sprintf('%2.3f',data.raw{sv.yval,sv.xval,sv.zval}.numtrials)]);
end
sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');
set(gh('XText'),'String',[num2str(min(data.time{sv.yval,sv.xval,sv.zval})) ' > ' num2str(max(data.time{sv.yval,sv.xval,sv.zval}))]);
set(gh('YText'),'String',[num2str(min(data.psth{sv.yval,sv.xval,sv.zval})) ' > ' num2str(max(data.psth{sv.yval,sv.xval,sv.zval}))]);
set(gh('ZText'),'String',' ');
val=get(gh('AxisBox'), 'Value');  % Check axes
if val == 1
	axis tight;
	axval=[-inf inf -inf m];
else
	xval=str2num(get(gh('XAxisEdit'),'String'));
	yval=str2num(get(gh('YAxisEdit'),'String'));
	axval=[xval yval];
end
axis(axval);
%----------------------------------END----------------------------------------

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot a single PSTH measurement
function doBARS(time,psth,trials,bp)
global data
global sv
try
		data.bars = [];
		data.bars.latency = [];

		if ~exist('trials','var')
			m=max(psth);
			[m,trials]=converttotime(m);
		end

		%if max(psth)>0;psth=(psth/max(psth))*m;end %normalise?

		psth(psth < 1) = 0;
		if ~exist('bp','var')
			bp = defaultParams;
			bp.prior_id = sv.bars.prior_id;
			bp.dparams=sv.bars.dparams;
			bp.burn_iter=sv.bars.burn_iter;
			bp.conf_level=sv.bars.conf_level;
			bp.k = sv.bars.k;
		end

		data.bars = barsP(psth,[time(1) time(end)],trials,bp);
		data.bars.psth = psth;
		data.bars.time = time;

		t1=data.bars.time(1);
		t2=data.bars.time(end);

		data.bars.time_fine = linspace(t1,t2,length(data.bars.mean_fine));

		data.bars.bp = bp;
		data.bars.trials = trials;
		sv.plotBARS = 1;
catch ME
	data.bars = [];
	disp(ME);
	disp(ME.stack(1));
	%rethrow(ME)
end
%----------------------------------END----------------------------------------

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Plot a single PSTH measurement

function PlotPoint

global data
global sv

errorbar(1,data.matrix,data.errormat,'ok','MarkerSize',10,'MarkerFaceColor',[0 0 0]);

m=get(gh('SMinEdit'),'String');
n=get(gh('SMaxEdit'),'String');
Value=get(gh('AnalysisMenu'),'Value');
String=get(gh('AnalysisMenu'),'String');
o=String{Value};
if data.plotburst==1
	o=['Burst ' o];
end
if data.plottonic==1
	o=['Tonic ' o];
end
t=[ data.runname 'Cell:' num2str(data.cell) '[' o ':' m '-' n ']'];

if sv.AnalysisMethod==6 %give an informative title for fftplots
	t=[t,data.fftinfo];
end
MakeTitle();

%data.matrixtitle=t;

sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');

ymin=data.matrix-(data.matrix/2);
ymax=data.matrix+(data.matrix/2);
if ymin==0 && ymax==0
	ymin=-1;
	ymax=1;
end
val=get(gh('AxisBox'), 'Value');  % Check axes
if val == 1
	axval=[0.8 1.2 ymin ymax];
else
	xval=str2num(get(gh('XAxisEdit'),'String'));
	yval=str2num(get(gh('YAxisEdit'),'String'));
	axval=[xval yval];
end
axis(axval);
text(1.01,data.matrix,['Value:' num2str(data.matrix) ' Error:' num2str(data.errormat)])
set(gh('XText'),'String',' ');
set(gh('YText'),'String',' ');
set(gh('ZText'),'String',' ');

%----------------------------------END----------------------------------------

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Single Variable Plotting Function (Rowland)

function PlotVector(xvals,xname)

global data;
global xax;
global dat;
global sv;

if ~exist('xvals','var') || isempty(xvals)
	xvals=data.xvalues;
end
if ~exist('xname','var') || isempty(xname)
	xname=data.xtitle;
end

if get(gh('PropBox'),'Value')==0 %use non proportional scale
	xvals=1:length(xvals);
end

if strcmp (get(gcf,'Tag'),'SpikeFig')
	ax=gh('SpikeFigMainAxes'); %used for polar plots
end

%deal with angular data
%now we need to transform the data to make values >180 wrap to get just
%the axis out
pvals=data.matrix;
pxvals = xvals;
belowpiidx=find(pxvals<=180);
abovepiidx=find(pxvals>180);
pvalsbelow=pvals(belowpiidx);
pvalsabove=pvals(abovepiidx);
pxvalsbelow=pxvals(belowpiidx);
pxvalsabove=pxvals(abovepiidx)-180;
pvalsabove=fliplr(pvalsabove);

bidx=1;
aidx=1;
for i=1:length(unique([pxvalsbelow pxvalsabove])) %loop through
	
	if aidx>length(pxvalsabove)
		pxvalsnew(i)=pxvalsbelow(bidx);
		pvalsnew(i)=pvalsbelow(bidx);
		bidx=bidx+1;
	elseif bidx>length(pxvalsbelow)
		pxvalsnew(i)=pxvalsabove(aidx);
		pvalsnew(i)=pvalsabove(aidx);
		aidx=aidx+1;
	elseif pxvalsbelow(bidx)<pxvalsabove(aidx) || pxvalsbelow(bidx)>pxvalsabove(aidx)
		pxvalsnew(i)=pxvalsbelow(bidx);
		pvalsnew(i)=pvalsbelow(bidx);
		bidx=bidx+1;
	elseif pxvalsbelow(bidx)==pxvalsabove(aidx);
		pxvalsnew(i)=pxvalsbelow(bidx);
		pvalsnew(i)=pvalsbelow(bidx)+pvalsabove(aidx);
		bidx=bidx+1;
		aidx=aidx+1;
	else
		pxvalsnew(i)=pxvalsabove(aidx);
		pvalsnew(i)=pvalsabove(aidx);
		aidx=aidx+1;
	end
	
end

pxvalsnew=ang2rad(pxvalsnew);
[mu2,ll2,ul2]=circ_mean(pxvalsnew,pvalsnew); %standard circular mean

pvals=[data.matrix data.matrix(1)];
if get(gh('SRemoveMean'),'Value')
	pvals=pvals-geomean(pvals);
	pvals(pvals<0)=0;
end
pvalsmax=ceil(max(pvals));
pxvals = ang2rad([xvals xvals(1)]);
perrors=[data.errormat data.errormat(1)];
pmin=pvals-perrors;
pmax=pvals+perrors;
%so we need to do both radial and axial circular means:
[mu,ll,ul]=circ_mean(pxvals,pvals); %standard circular mean
pval=circ_rtest(pxvals,pvals);

switch sv.SmoothType
	case 'none'
		switch get(gh('STypeMenu'),'Value')
			case 1 %normal
				areabar(xvals,data.matrix,data.errormat,[.8 .8 .8],1);
			case 2
				if strcmp (get(gcf,'Tag'),'SpikeFig')
					set(gca,'NextPlot','replacechildren');
					set(gcf,'NextPlot','add');
				end
				h=polar(pxvals,pvals,'ko-');
				set(h,'MarkerFaceColor',[0 0 0]);
				set(h,'LineWidth',2);
				hold on
				h=polar(pxvalsnew,pvalsnew,'r-.');
				set(h,'Color',[1 0.6 0.6]);
				polar(pxvals,pmin,'k-.');
				polar(pxvals,pmax,'k-.');
				polar([mu2 mu2],[0 pvalsmax],'r-');
				if ~isnan(ll2)
					polar([ll2 ll2],[0 pvalsmax],'r-.');
				end
				if ~isnan(ul2)
					polar([ul2 ul2],[0 pvalsmax],'r-.');
				end
				polar([mu mu],[0 pvalsmax],'b-');
				if ~isnan(ll)
					%polar([ll ll],[0 pvalsmax],'b-.');
				end
				if ~isnan(ul)
					%polar([ul ul],[0 pvalsmax],'b-.');
				end
				hold off
			case 3
				mmpolar(pxvals,pvals,'ko-',pxvals,pmin,'k:',pxvals,pmax,'k:');
				hold on
				mmpolar([mu mu],[0 pvalsmax],'r-')
				hold off
				set(gca,'Tag','SpikeFigMainAxes')
			case 4
				p.RGridColor=[0.7 0.7 0.7];
				p.TGridColor=[0.7 0.7 0.7];
				p.Style='compass';
				p.Border='off';
				mmpolar(pxvals,pvals,'ko-',pxvals,pmin,'k:',pxvals,pmax,'k:',p);
				hold on
				mmpolar([mu mu],[0 pvalsmax],'r-',p)
				hold off
				set(gca,'Tag','SpikeFigMainAxes')
		end
	otherwise
		[xax,dat] = fitdata(xvals,data.matrix','interpolated',sv.SmoothType);
		areabar(xvals,data.matrix,data.errormat,[.8 .8 .8]);
		hold on;
		plot(xax,dat,'r-');
		hold off;
end

if get(gh('PropBox'),'Value')==0 %use non proportional scale
	set(gca,'XTickLabel',num2str(data.xvalues'));
end
MakeTitle('vector');
sv.xlabelhandle=xlabel(xname);
switch sv.AnalysisMethod
	case 4
		sv.ylabelhandle=ylabel('Total Spike Count');
	case 6
		data.matrixtitle=[data.matrixtitle,data.fftinfo];
	otherwise
		sv.ylabelhandle=ylabel('Firing Rate (Hz)');
end

if get(gh('STypeMenu'),'Value')>1
	data.matrixtitle=[data.matrixtitle '\newline Circ Mean= ' num2str(rad2ang(mu)) '[' num2str(rad2ang(ll)) ':' num2str(rad2ang(ul)) '] / Ax mean=' num2str(rad2ang(mu2)) '[' num2str(rad2ang(ll2)) ':' num2str(rad2ang(ul2)) '] p=' num2str(pval) ];
end
sv.titlehandle=title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle]);
set(sv.titlehandle,'ButtonDownFcn','spikes(''Copy Title'');');

if ~isempty(data.fftinfnnpoints) && ~(data.fftinfnnpoints(1)==inf)  %plots our inf & NaN points as dashed lines
	set(gca,'NextPlot','add');
	plot(ones(1,length(data.matrix))*data.fftinfnnpoints(1),'R--');
	plot(ones(1,length(data.matrix))*data.fftinfnnpoints(2),'R--');
	set(gca,'NextPlot','replacechildren');
end

val=get(gh('AxisBox'), 'Value');  % Check axes

if val == 1
	axis auto;
	axis tight;
	axval=axis;
else
	xval=str2num(get(gh('XAxisEdit'),'String'));
	yval=str2num(get(gh('YAxisEdit'),'String'));
	axval=[xval yval];
end

axis(axval);

set(gh('XText'),'String',[num2str(min(xvals)) ' > ' num2str(max(xvals))]);
set(gh('YText'),'String',[num2str(min(data.matrix)) ' > ' num2str(max(data.matrix))]);
set(gh('ZText'),'String',' ');

if get(gh('StatBurst'),'Value')==1
	if data.plotburst==1
		burststats(data.raw);
	end
end

%----------------------------------END----------------------------------------

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
% Curve fitting routine (Rowland)
function [xaxisout,dataout] = fitdata(xaxisin,datain,fittype,fitdetail);
switch fittype
	case 'interpolated'
		xaxisout = min(xaxisin):0.01:max(xaxisin);
		dataout = interp1(xaxisin,datain',xaxisout,fitdetail);
	case 'polynomial'
		xaxisout = min(xaxisin):0.01:max(xaxisin);
		polyinfo = polyfit(xaxisin,datain,fitdetail);
		dataout = polyval(polyinfo,xaxisout);
	case 'smoothed'
		%smooth calls an external smoothing routine
		switch fitdetail
			case 'none'
				xaxisout=xaxisin;
				dataout=smooth(datain,1);
			otherwise
				xaxisout = min(xaxisin):0.01:max(xaxisin);
				dataout = smooth(interp1(xaxisin,datain,xaxisout,fitdetail),100);
		end
end
%----------------------------------END----------------------------------------


%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
%To plot current axes in a new window
%

function SpawnPlot(handle)

global data sv;

x=axis;
cmap=get(gcf,'ColorMap');
[a,b]=view;
sv.spawnhandle=figure;
figpos(1,[780 680]);
set(gcf,'Tag','Spawnfig');
set(gca,'Tag','Spawnfigaxis');
set(gcf,'Color',[1 1 1]);

ChoosePlot;
set(gca,'Tag','Spawnfigaxis');

switch data.numvars
	case 0
		% 	pos=get(gcf,'Position');
		% 	set(gcf,'Position',[pos(1)+(pos(3)*0.75)/2 pos(2) pos(3)*0.75 pos(4)]);
		% 	subplot(2,1,1)
		% 	PlotPoint;
		% 	set(gca,'FontSize',12);
		% 	set(gca,'LineWidth',2);
		% 	set(gca,'Tag','');
		% 	set(sv.titlehandle,'FontSize',12);
		% 	set(sv.xlabelhandle,'FontSize',12);
		% 	set(sv.ylabelhandle,'FontSize',12);
		% 	subplot(2,1,2)
		% 	PlotPSTH;
		% 	set(sv.titlehandle,'FontSize',12);
		% 	set(sv.xlabelhandle,'FontSize',12);
		% 	set(sv.ylabelhandle,'FontSize',12);
		% 	if sv.plottype==2; axis(x);	end
	case 1
		axis(x);
	otherwise
		colormap(cmap);
		view(a,b);
		axis(x);
		if ~strcmp(sv.LightAdd,'none')
			camlight(sv.LightAdd);
		end;
		if data.areaplot==1 %& data.textload==0
			h=text((x(1)-(x(1)/25)),(x(3)-(x(3)/25)),num2str(data.anal.size));
			set(h,'Color',[1 0 0],'Fontsize',12,'Fontweight','bold');
		end
		if strcmp(sv.PlotType,'Rectangle Plot')
			set(sv.titlehandle,'String',[get(sv.titlehandle,'String') ' Max=' num2str(sv.rectanglemax)]);
		end
		if data.plottype > 6
			cbh=colorbar;
		end
		if data.xrange == data.yrange
			axis square
		end
end

if data.numvars>0
	if isfield(sv,'titlehandle'); set(sv.titlehandle,'FontSize',12); end
	if isfield(sv,'xlabelhandle'); set(sv.xlabelhandle,'FontSize',12); end
	if isfield(sv,'ylabelhandle'); set(sv.ylabelhandle,'FontSize',12); end
end

set(gca,'FontSize',12);
set(gca,'LineWidth',2);

if exist('cbh')
	set(cbh,'FontSize',12);
	set(cbh,'LineWidth',0.1);
	set(cbh,'TickDir','out');
end

if ~strcmp(sv.PlotType,'Rectangle Plot'); fixfig; end %fixes surface plots
set(gca,'tag','Spawnfig');

if get(gh('SpikeMenu'),'Value')==2
	if isfield(data,'ratio')
		s1=mean(mean(data.ratio)); t='mean burst ratio:  ';
		s=[sprintf('%s',t), sprintf('%0.5g',s1)];
		gtext(s);
	end
end

if get(gh('STypeMenu'), 'Value')==1
	set(gca,'YDir','normal');
end

%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
%Quick frames
%
function temporalanalysis()
global data
global sv

if data.plotburst == 0 && data.plottonic == 0
	psth = data.psth;
elseif data.plotburst == 1
	psth = data.bpsth;
elseif data.plottonic == 1
	psth = data.psth;
	bpsth = data.bpsth;
	for zz = 1:size(data.psth,3)
		for xx = 1:size(data.psth,2)
			for yy = 1:size(data.psth,1)
				psth{yy,xx,zz} = psth{yy,xx,zz} - bpsth{yy,xx,zz};
			end
		end
	end
end

wi = str2num(get(gh('SISIWindow'),'String'));
sh = str2num(get(gh('SISIShift'),'String'));
timeslice=data.binwidth;
wsum = wi / timeslice;
ssum = sh / timeslice;
time = data.time{1,1,1};
totalsteps = max(size(time));
z = sv.zval;
isSurface = true;

if sv.xlock == 1 && data.numvars > 1
	xrange = sv.xval;
	xvalues = data.xrange(sv.xval);
	isSurface = false;
else
	xrange = 1:data.xrange;
	xvalues = data.xvalues;
	ttrange=length(xrange);
end

if sv.ylock == 1 || data.numvars == 1
	yrange = sv.yval;
	%yvalues = data.yvalues(sv.yval);
	isSurface = false;
else
	yrange = 1:data.yrange;
	yvalues = data.yvalues;
	ttrange=length(yrange);
end

ttime = sv.maxt - sv.mint;
mini = find(time == sv.mint);
maxi = find(time == sv.maxt);

msteps = floor(ttime / sh);

if sv.ylock == 1 || data.numvars == 1
	tt=zeros(length(xrange),msteps);
else
	tt=zeros(length(yrange),msteps);
end

if maxi+wsum > totalsteps
	msteps = msteps - wsum;
end

% while maxi+wsum > totalsteps
% 	msteps = msteps - 1;
% end

tmatrix=zeros(length(yrange),length(xrange),msteps);

mi = mini;
mx = mi+(wsum-1);

for i=1:msteps   %for each bin
	for j=xrange
		for k=yrange
			if mx <= maxi
				if length(yrange) == 1
					tmatrix(1,j,i)=sum(psth{k,j,z}(mi:mx));
					tt(j,i)=sum(psth{k,j,z}(mi:mx));
				elseif length(xrange) == 1
					tmatrix(k,1,i)=sum(psth{k,j,z}(mi:mx));
					tt(k,i)=sum(psth{k,j,z}(mi:mx));
				else
					tmatrix(k,j,i)=sum(psth{k,j,z}(mi:mx));
				end
			else
			end
		end
	end
	tstr(i) = time(mi);
	mi = mi + ssum;
	mx = mx + ssum;
end

mmax=max(tmatrix(:));

tsurface = zeros(msteps,ttrange);

h=figure;
figpos(1,[1000 1000]);	%position the figure
set(gcf,'Color',[1 1 1]);
imagesc(tt);

assignin('base','tmatrix',tt)
return

for i=1:msteps
	d=tmatrix(:,:,i);
	if isSurface == true
		PlotDMatrix(d);
		colormap(sv.CMap);
		xstep = data.xvalues(2) - data.xvalues(1);
		ystep = data.yvalues(2) - data.yvalues(1);
		text(data.xvalues(1)+xstep/5,data.yvalues(1)+ystep/5,mmax,num2str(tstr(i)),'Color',[1 1 0],'FontSize',20,'FontWeight','bold');
		if data.dim==0
			caxis([0 mmax]);
		else
			caxis([0 mmax]);
			axis([-inf inf -inf inf 0 mmax]);
			axis off;
		end
	else
		plot(xvalues,d','k-o','LineWidth',3,'MarkerFaceColor',[0 0 0]);
		axis([-inf inf 0 mmax])
		text(xvalues(1), mmax-(mmax/20), num2str(tstr(i)),'Color',[1 0 0],'FontSize',20,'FontWeight','bold');
		tsurface(i,:) = d;
	end
	pause(0.1)
	M(i) = getframe;
end

%c=colormap;

if exist('implay','file')
	close(h);
	implay(M);
else
	title('Playing movie 3 times, then will save to movie.mat and plot individual frames in a new figure.');
	movie(M,3,10)
end
save([sv.historypath 'movie.mat'], 'M');
figure;
figpos(1,[1000 1000]);	%position the figure
set(gcf,'Color',[1 1 1]);

if msteps <=16
	m=4;
	n=4;
elseif msteps <=20
	m=4;
	n=5;
elseif msteps <=25
	m=5;
	n=5;
elseif msteps <=30
	m=6;
	n=5;
elseif msteps <=36
	m=6;
	n=6;
elseif msteps <=42
	m=7;
	n=6;
elseif msteps <=49
	m=7;
	n=7;
elseif msteps <=56
	m=8;
	n=7;
elseif msteps <=64
	m=8;
	n=8;
elseif msteps <=72
	m=9;
	n=8;
elseif msteps <=81
	m=9;
	n=9;
elseif msteps <=90
	m=10;
	n=9;
elseif msteps <=100
	m=10;
	n=10;
else
	errordlg('Sorry, too many movie frames for 1 figure');
	error('Returned with Error')
end

a=1;
for i=1:msteps
	subaxis(m,n,a,'S',0,'P',0,'M',0.1);
	image(M(i).cdata);
	axis square
	axis off
	a=a+1;
end
suptitle(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle '\newlineMAX = ' num2str(mmax) ' | window:' num2str(wi) ' shift:' num2str(sh)]);

if isSurface == false
	figure;
	figpos(1,[1000 1000])
	set(gcf,'Color',[1 1 1]);
	if ~strcmpi(sv.SmoothType,'none')
		xx=linspace(xvalues(1),xvalues(end),length(xvalues)*5);
		yy=linspace(tstr(1),tstr(end),length(tstr)*5);
		[xx2,yy2]=meshgrid(xx,yy);
		[x,y]=meshgrid(xvalues,tstr);
		tsurface2=interp2(x,y,tsurface,xx2,yy2,'linear');
		pcolor(xx,yy,tsurface2);
	else
		pcolor(xvalues,tstr,tsurface);
	end
	axis tight
	shading flat
	caxis([0 mmax]);
	colorbar
	set(gca,'TickDir','out','FontSize',14);
	xlabel('First IV')
	ylabel('Time(ms)')
	title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle '\newlineMAX = ' num2str(mmax) ' | window:' num2str(wi) ' shift:' num2str(sh)]);

	figure;
	figpos(1,[1000 1000])
	set(gcf,'Color',[1 1 1]);
	if ~strcmpi(sv.SmoothType,'none')
		xx=linspace(xvalues(1),xvalues(end),length(xvalues)*5);
		yy=linspace(tstr(1),tstr(end),length(tstr)*5);
		[xx2,yy2]=meshgrid(xx,yy);
		[x,y]=meshgrid(xvalues,tstr);
		tsurface2=interp2(x,y,tsurface,xx2,yy2,'linear');
		waterfall(xx,yy,tsurface2);
	else
		waterfall(xvalues,tstr,tsurface);
	end
	axis tight
	shading flat
	caxis([0 mmax]);
	colorbar
	set(gca,'TickDir','out','FontSize',14);
	xlabel('First IV')
	ylabel('Time(ms)')
	title(['\fontname{Helvetica}\fontsize{12}' data.matrixtitle '\newlineMAX = ' num2str(mmax) ' | window:' num2str(wi) ' shift:' num2str(sh)]);


end


%-----------------------------------------------------------------------------
%FUNCTION DEFINITION /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
%-----------------------------------------------------------------------------
%
%Get the diagonal from a surface and plot a polar plot from it
%
function polardiagonal

global data sv;

if data.numvars < 2
	errordlg('You need at least 2 variables to get a diagonal out!');
	error('You need at least 2 variables to get a diagonal out!');
end

diagonal=diag(data.matrix)';
diagonalerror=diag(data.errormat)';

pvals=[diagonal diagonal(1)];
pvalsmax=ceil(max(pvals));
if length(data.xvalues) > length(data.yvalues)
	pxvals = ang2rad([data.xvalues(1:length(data.yvalues)) data.xvalues(1)]);
else
	pxvals = ang2rad([data.xvalues data.xvalues(1)]);
end
perrors=[diagonalerror diagonalerror(1)];
pmin=pvals-perrors;
pmax=pvals+perrors;

%so we need to do both radial and axial circular means:
[mu,ll,ul]=circ_mean(pxvals,pvals); %standard circular mean
pval=circ_rtest(pxvals,pvals,mean(diff(pxvals(1:end-1))));
pval2=circ_vtest(pxvals,mu,pvals,mean(diff(pxvals(1:end-1))));

if length(data.xvalues) > length(data.yvalues)
	pxvals2 = [data.xvalues(1:length(data.yvalues)) data.xvalues(1)];
else
	pxvals2 = [data.xvalues data.xvalues(1)];
end
belowpiidx=find(pxvals2<=180);
abovepiidx=find(pxvals2>180);
pvalsbelow=pvals(belowpiidx);
pvalsabove=pvals(abovepiidx);
pxvalsbelow=pxvals2(belowpiidx);
pxvalsabove=pxvals2(abovepiidx)-180;
pvalsabove=fliplr(pvalsabove);

if isempty(pvalsabove)
	pvalsabove=0;
	pxvalsabove=0;
end

bidx=1;
aidx=1;
for i=1:length(unique([pxvalsbelow pxvalsabove])) %loop through
	
	if aidx>length(pxvalsabove) && ~isempty(pxvalsabove)
		pxvalsnew(i)=pxvalsbelow(bidx);
		pvalsnew(i)=pvalsbelow(bidx);
		bidx=bidx+1;
	elseif bidx>length(pxvalsbelow)
		pxvalsnew(i)=pxvalsabove(aidx);
		pvalsnew(i)=pvalsabove(aidx);
		aidx=aidx+1;
	elseif pxvalsbelow(bidx)<pxvalsabove(aidx) || pxvalsbelow(bidx)>pxvalsabove(aidx)
		pxvalsnew(i)=pxvalsbelow(bidx);
		pvalsnew(i)=pvalsbelow(bidx);
		bidx=bidx+1;
	elseif pxvalsbelow(bidx)==pxvalsabove(aidx);
		pxvalsnew(i)=pxvalsbelow(bidx);
		pvalsnew(i)=pvalsbelow(bidx)+pvalsabove(aidx);
		bidx=bidx+1;
		aidx=aidx+1;
	else
		pxvalsnew(i)=pxvalsabove(aidx);
		pvalsnew(i)=pvalsabove(aidx);
		aidx=aidx+1;
	end
	
end

pxvalsnew=ang2rad(pxvalsnew);
[mu2,ll2,ul2]=circ_mean(pxvalsnew,pvalsnew); %standard circular mean


figure;

h=polar(pxvalsnew,pvalsnew,'ro-.');
set(h,'Color',[1 0.6 0.6]);
set(h,'MarkerFaceColor',[1 0.6 0.6]);
hold on
h=polar(pxvals,pvals,'ko-');
set(h,'MarkerFaceColor',[0 0 0]);
set(h,'LineWidth',2);
polar(pxvals,pmin,'k-.');
polar(pxvals,pmax,'k-.');
polar([mu mu],[0 pvalsmax],'b-');
if ~isnan(ll)
	polar([ll ll],[0 pvalsmax],'b-.');
end
if ~isnan(ul)
	polar([ul ul],[0 pvalsmax],'b-.');
end
polar([mu2 mu2],[0 pvalsmax],'r-');
if ~isnan(ll2)
	polar([ll2 ll2],[0 pvalsmax],'r-.');
end
if ~isnan(ul2)
	polar([ul2 ul2],[0 pvalsmax],'r-.');
end
hold off

MakeTitle('vector');
xlabel(data.xtitle);
switch sv.AnalysisMethod
	case 4
		ylabel('Total Spike Count');
	case 6
		data.matrixtitle=[data.matrixtitle,data.fftinfo];
	otherwise
		ylabel('Firing Rate (Hz)');
end
title([data.matrixtitle 'DIAGONAL -- CircMean=' num2str(rad2ang(mu)) '  AxialMean=' num2str(rad2ang(mu2)) '  pR=' num2str(pval) ' pV=' num2str(pval2) ]);
