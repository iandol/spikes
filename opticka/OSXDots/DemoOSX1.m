% Demo2%% DemoOSX1 -% demonstrates how to use makeDotTargets to set targets in a place a% certain distance from either the fixation or the aperture and in the% direction of the possible motions. This was created mostly for me to test% moving the dots in relation to the targets/fixation.%% tests creating targets according to dots directions% can set dotInfo.auto in createDotInfo to have the targets show up on% in the same directions as the dots can go, either centered on the% fixation or the dots aperture.%% does not require response, just shows some targets and then the dotstry    clear all    %initialize the screen    % touchscreen is 34, laptop is 32, viewsonic is 38    screenInfo = openExperiment(34,50,0);    %screenInfo = setupScreen(38,50)    % initialize dots    % one means using keyboard, not touchscreen    dotInfo = createDotInfo(1);    % dotInfo and screenInfo are small structures, but once they are made    % we want to avoid manipulating the data in them so we don't make    % copies of the structures.        % creates targets according to dots directions - this code has now been    % incorporated into makeDotTargets    % 1 to set manually, 2 to use fixation as center point, 3 to use aperture    % as center    % use fixation as center    dotInfo.auto(1)    if dotInfo.auto(1) == 1        xpos = dotInfo.tarXY(:,1);        ypos = dotInfo.tarXY(:,2);    else        if dotInfo.auto(1) == 2            xpos = [dotInfo.fixXY(:,1); dotInfo.tarXY(:,1)];            ypos = [dotInfo.fixXY(:,2); dotInfo.tarXY(:,2)];        elseif dotInfo.auto(1) == 3            xpos = [dotInfo.apXYD(:,1); dotInfo.tarXY(:,1)];            ypos = [dotInfo.apXYD(:,2); dotInfo.tarXY(:,2)];        end        [xpos ypos] = targetPosits(xpos, ypos, dotInfo.dirSet);    end    % add fixation to targets    xpos = [dotInfo.fixXY(:,1); xpos]';    ypos = [dotInfo.fixXY(:,2); ypos]';    diam = [dotInfo.fixDiam dotInfo.tarDiam];    tarColors = repmat(dotInfo.tarColor,size(dotInfo.tarDiam,2),1);    colors = [dotInfo.fixColor; tarColors];    % initialize targets    targets = setNumTargets(length(xpos));    dotInfo.tarXY(:,1)';     dotInfo.tarXY(:,2)';    xpos;    ypos;    targets = newTargets(screenInfo, targets, 1:length(xpos), xpos, ypos, diam, colors);    %targets = newTargets(screenInfo, targets, [1 2], [0 -10], [0 -100], [5 10], [0 255 255; 0 255 0]);    %targets = newTargets(screenInfo, targets, [1 2 3], [0 -10 10], [0 -100 100], [5 10 10], [0 255 255; 0 255 0; 255 0 0]);            showTargets(screenInfo, targets, 1:length(xpos));    %showTargets(screenInfo, targets, [1 2]);    %showTargets(screenInfo, targets, [1 2 3]);        %pause(0.5)        % show the fixation    %Screen('FillOval', screenInfo.curWindow, dotInfo.fixColor, dotInfo.fixRect);    %Screen('DrawingFinished',screenInfo.curWindow,screenInfo.dontclear);    %Screen('Flip', screenInfo.curWindow,0,screenInfo.dontclear);        [frames, rseed, start_time, end_time, response, response_time] = dotsX(screenInfo, dotInfo, targets);        %showTargets(screenInfo, targets, [1 2 3])    pause(0.5)    % clear the screen and exit    closeExperiment;    %closeScreen(screenInfo.curWindow, screenInfo.oldclut)catch    disp('caught')    %screenInfo    closeExperiment;    %closeScreen(screenInfo.curWindow, screenInfo.oldclut)end;