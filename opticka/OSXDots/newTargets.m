function targets = newTargets(screenInfo, targets, targetIndex, x_position, y_position, diameter, tcolor)% function changeTarget%%	Sets up for Erasing & Displaying the targets%	Not done until showTargets is called%%	Remember that all argumentscan be arrays%	Arguments:%       screenInfo          required input, info about the screen from %                           [screenInfo, targets] = setupScreen(38,50,8);%       targets             required input, structure made by setNumTargets that%                           pre-allocatges the matrices for the targets%       target_index:       required input, index(indices) into targetMatrix  %                           of target(s) to be set, must be same size as x,y,%                           diameter, and color index%		x_position:			x_position of target(s) to be shown or [], row%		y_position:			y_position of target(s) to be shown or [], row%		diameter:			diameter of target(s) to be shown or [], row%		tcolor:             new value(s) for color of target(s) to be shown%                           or []%%	Examples:%%   Before calling newTargetrs, make the target structure:%   targets = setNumTargets(6);%   %	1) to create 2 new targets%		targets = newTargets(screenInfo, targets, [1 2], [-5 5], [0 0], [4 4], [255 255 0; 255 255 0])%       to now show these targets on screen use:%   showTargets([1 2])%%   2) can change targets, if there are 3 targets, and want to change just the%      colors of targets 2 and 3:%   targets = newTargets(screenInfo, targets, [2 3], [], [], [], [255 255 0; 0 255 255])%      now can show any combination, for example:%   showTargets([1 3])% %% history:%	5/29/01 ... created by jig%   6/06 ... greatly change and adapted to OSX by MKMK%mfilenameif isempty(x_position)    x_position = targets.x(targetIndex,:)';endif isempty(y_position)    y_position = targets.y(targetIndex,:)';endif isempty(diameter)    diameter = targets.d(targetIndex,:)';end% x_position% y_position% diameterindex = 1:length(targetIndex);center = repmat(screenInfo.center',size(x_position));% ppd is off by a factor of 10 so that we don't send any fractions to rexppd = screenInfo.ppd/10;% change the xy coordinates to pixels (y is inverted - pos on bottom, neg.% on toptar_xy = [center(1,:) + x_position * ppd; center(2,:) - y_position * ppd];% change the diameter to pixels, make it same size as tar_xy so we can add% themdiam = [diameter; diameter] * ppd;%tar_xy(:,1);% now need to change from center and diameter to the corners of a box that% would enclose the circle for use with Screen('FillOval')tarRects = [tar_xy-diam/2; tar_xy+diam/2]';if isempty(tcolor)    tarColor = targets.colors(targetIndex,:);elseif size(tcolor,1) == 1    tarColor = repmat(tcolor,size(targetIndex,2),1);else    tarColor = tcolor;endtargets.x(targetIndex,:) = x_position;targets.y(targetIndex,:) = y_position;targets.d(targetIndex,:) = diameter;targets.rects(targetIndex,:) = tarRects(index,:);targets.colors(targetIndex,:) = tarColor(index,:);